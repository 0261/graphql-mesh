(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{144:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=o.a.createContext({}),p=function(e){var n=o.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},l=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=p(t),l=r,h=u["".concat(a,".").concat(l)]||u[l]||b[l]||i;return t?o.a.createElement(h,s(s({ref:n},d),{},{components:t})):o.a.createElement(h,s({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<i;d++)a[d]=t[d];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"},89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),o=t(7),i=(t(0),t(144)),a={id:"subscriptions-webhooks",title:"Handle Webhooks with GraphQL Subscriptions",sidebar_label:"Subscriptions & Webhooks"},s={unversionedId:"recipes/subscriptions-webhooks",id:"recipes/subscriptions-webhooks",isDocsHomePage:!1,title:"Handle Webhooks with GraphQL Subscriptions",description:"GraphQL Mesh can consume Webhooks as GraphQL Subscriptions in the unified schema by using built-in PubSub implementation",source:"@site/docs/recipes/subscriptions-webhooks.md",slug:"/recipes/subscriptions-webhooks",permalink:"/docs/recipes/subscriptions-webhooks",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/subscriptions-webhooks.md",version:"current",sidebar_label:"Subscriptions & Webhooks",sidebar:"sidebar",previous:{title:"Apollo Federation",permalink:"/docs/recipes/federation"}},c=[{value:"Add new Subscription field",id:"add-new-subscription-field",children:[{value:"Use JSON Schema Handler instead",id:"use-json-schema-handler-instead",children:[]}]},{value:"Handle Webhook HTTP Requests",id:"handle-webhook-http-requests",children:[{value:"Using Declarative API",id:"using-declarative-api",children:[]},{value:"Custom Handler in Code",id:"custom-handler-in-code",children:[]}]}],d={rightToc:c};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"GraphQL Mesh can consume Webhooks as GraphQL Subscriptions in the unified schema by using built-in PubSub implementation"),Object(i.b)("h2",{id:"add-new-subscription-field"},"Add new Subscription field"),Object(i.b)("p",null,"You can use ",Object(i.b)("inlineCode",{parentName:"p"},"additionalTypeDefs")," and ",Object(i.b)("inlineCode",{parentName:"p"},"additionalResolvers")," to add subscription root fields to your unified schema."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"additionalTypeDefs: |\n  # If you don't have Subscription type defined anywhere\n  # You have to extend subscription definition\n  extend schema {\n    subscription: Subscription\n  }\n  type Subscription {\n    todoAdded: Todo\n  }\nadditionalResolvers:\n  - type: Subscription\n    field: todoAdded\n    pubsubTopic: todoAdded\n")),Object(i.b)("p",null,"We're able to use existing types from our unified schema, and this root field is subscribed to our specific ",Object(i.b)("inlineCode",{parentName:"p"},"topic")," in our PubSub service."),Object(i.b)("h3",{id:"use-json-schema-handler-instead"},"Use JSON Schema Handler instead"),Object(i.b)("p",null,"You can also use JSON Schema handler if you don't want to write an extra GraphQL type definitions. You can generate GraphQL type definitions from sample JSON response;"),Object(i.b)("p",null,"Just add the following to your existing JSON schema handler configuration in ",Object(i.b)("inlineCode",{parentName:"p"},".meshrc.yml")," file;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"          - type: Subscription\n            field: todoAdded\n            pubsubTopic: todoAdded\n            responseSample: ./todo.json\n")),Object(i.b)("h2",{id:"handle-webhook-http-requests"},"Handle Webhook HTTP Requests"),Object(i.b)("p",null,"Add custom express handler to listen specific path for your HTTP Webhook on Mesh CLI Server. You can do it either in a programmatic or declarative way."),Object(i.b)("h3",{id:"using-declarative-api"},"Using Declarative API"),Object(i.b)("p",null,"Let's say you have running GraphQL Mesh server listening ",Object(i.b)("inlineCode",{parentName:"p"},"4000")," port, and you need to listen a specific route for upcoming HTTP requests as HTTP Webhook."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"serve:\n  port: 4000\n  handlers:\n    - path: /webhooks/todo_added\n      pubsubTopic: todoAdded\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"path"),' defines the path in our server that will receive HTTP requests as "Webhook" from our API then send it to ',Object(i.b)("inlineCode",{parentName:"p"},"pubsubTopic"),"."),Object(i.b)("h3",{id:"custom-handler-in-code"},"Custom Handler in Code"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"handler")," can get any kind of Express request handler. So you can extend Mesh Server however you want."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"serve:\n  port: 4000\n  handlers:\n    - path: /webhooks/todo_added\n      handler: ./todo_added.handler.js\n")),Object(i.b)("p",null,"and in ",Object(i.b)("inlineCode",{parentName:"p"},"todo_added_handler.js")," we have something like following;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = (req, res) => {\n    // Mesh PubSub instance is available under `req`\n    req.pubsub.publish('todoAdded', req.body);\n    res.end(); // Don't forget to finish the HTTP connection\n};\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can find an example for that ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/json-schema-subscriptions"}),"here"))))}p.isMDXComponent=!0}}]);