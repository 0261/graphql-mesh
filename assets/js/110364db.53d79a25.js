(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[3267],{5318:function(e,a,t){"use strict";t.d(a,{Zo:function(){return p},kt:function(){return m}});var n=t(7378);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),s=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=s(e.components);return n.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return t?n.createElement(h,o(o({ref:a},p),{},{components:t})):n.createElement(h,o({ref:a},p))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5456:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return u}});var n=t(9603),r=t(120),i=(t(7378),t(5318)),o=["components"],l={id:"cache",title:"Cache Transform",sidebar_label:"Cache"},c={unversionedId:"transforms/cache",id:"transforms/cache",isDocsHomePage:!1,title:"Cache Transform",description:"The cache transform allow you to apply caching over your data-sources easily.",source:"@site/docs/transforms/cache.md",sourceDirName:"transforms",slug:"/transforms/cache",permalink:"/docs/transforms/cache",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/transforms/cache.md",version:"current",sidebar_label:"Cache",frontMatter:{id:"cache",title:"Cache Transform",sidebar_label:"Cache"},sidebar:"sidebar",previous:{title:"Encapsulate Transform",permalink:"/docs/transforms/encapsulate"},next:{title:"Snapshot Transform",permalink:"/docs/transforms/snapshot"}},s=[{value:"How to use?",id:"how-to-use",children:[{value:"Simple caching",id:"simple-caching",children:[]},{value:"The Cache Key",id:"the-cache-key",children:[]}]},{value:"Cache Invalidation",id:"cache-invalidation",children:[{value:"TTL",id:"ttl",children:[]},{value:"Operation-based",id:"operation-based",children:[]},{value:"Programmatic",id:"programmatic",children:[]}]},{value:"Codesandbox Example",id:"codesandbox-example",children:[]},{value:"Config API Reference",id:"config-api-reference",children:[]}],p={toc:s};function u(e){var a=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," transform allow you to apply caching over your data-sources easily. "),(0,i.kt)("p",null,"It allow you to configure custom invalidation rules (by ttl / mutation), and selective caching, according to your needs."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This transform is being applied globally, because of the need to communicate with other GraphQL operations from your mesh.")),(0,i.kt)("p",null,"To get started with this transform, install it from npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"yarn add @graphql-mesh/transform-cache\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"GraphQL Mesh uses a default in-memory LRU cache, but you can replace it with any other key=>value cache mechanism. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/cache/inmemory-lru"},"cache section")," for more info.")),(0,i.kt)("h2",{id:"how-to-use"},"How to use?"),(0,i.kt)("h3",{id:"simple-caching"},"Simple caching"),(0,i.kt)("p",null,"To cache some of your queries, apply the following transform rule. This following example will cache all ",(0,i.kt)("inlineCode",{parentName:"p"},"Query.*")," in your schema, forever:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.*\n")),(0,i.kt)("p",null,"You can also apply it to a specific field, or multiple fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.users\n  - cache:\n      - field: Query.posts\n")),(0,i.kt)("h3",{id:"the-cache-key"},"The Cache Key"),(0,i.kt)("p",null,"Each cache record is being stored with a key. The default way of creating this key is to use the GraphQL type name, the GraphQL field name, and a hash of the ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," object. This is in order to make that we can distinct the cache key according to the data it's storing."),(0,i.kt)("p",null,"You can customize the ",(0,i.kt)("inlineCode",{parentName:"p"},"cacheKey")," according to your needs, and you can use custom helpers to help you create those cache keys dynamically. "),(0,i.kt)("p",null,"The following example creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"cacheKey")," by an GraphQL query argument called ",(0,i.kt)("inlineCode",{parentName:"p"},"userId"),", per day:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.user\n        cacheKey: user-{args.id}-{yyyy-mm-dd | date}\n")),(0,i.kt)("h2",{id:"cache-invalidation"},"Cache Invalidation"),(0,i.kt)("h3",{id:"ttl"},"TTL"),(0,i.kt)("p",null,"Invalidation by TTL is the simplest way to deal with your cache. You can specify any time (in seconds) to keep your cache. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.*\n        invalidate:\n          ttl: 3600 # 1 hour\n")),(0,i.kt)("h3",{id:"operation-based"},"Operation-based"),(0,i.kt)("p",null,"GraphQL Mesh has a built-in operation-based caching solution."),(0,i.kt)("p",null,"You can cache data easily, and invalidate it only when it changes by a mutation."),(0,i.kt)("p",null,"For example, given the following schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user(id: ID!): User!\n}\n\ntype Mutation {\n  updateUser(userIdToUpdate: ID!, setFields: UpdateUserInput!): User!\n}\n\ntype User {\n  id: ID!\n  email: String!\n  name: String\n}\n\ninput UpdateUserInput {\n  email: String\n  name: String\n}\n")),(0,i.kt)("p",null,"You can set a simple caching, based on a user id: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.user\n        cacheKey: user-{args.id}\n")),(0,i.kt)("p",null,"And you can add operation-based invalidation, so when ",(0,i.kt)("inlineCode",{parentName:"p"},"updateUser")," is done successfully, it will invalidate the matching cache record to make sure the data will be fetched next time from the remote source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - cache:\n      - field: Query.user\n        cacheKey: user-{args.id}\n        invalidate:\n          effectingOperations:\n            - operation: Mutation.updateUser\n              matchKey: user-{args.userIdToUpdate}\n")),(0,i.kt)("p",null,"This way, when someone uses ",(0,i.kt)("inlineCode",{parentName:"p"},"updateUser")," with a specific user id, it will update the data record, and then invalidate the cache automatically."),(0,i.kt)("h3",{id:"programmatic"},"Programmatic"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getMesh")," method of GraphQL Mesh returns the general key=>value cache it uses at the moment, so you can easily access it and invalidate records according to your needs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const { schema, execute, cache } = getMesh(config);\n\ncache.delete(SOME_KEY);\n")),(0,i.kt)("h2",{id:"codesandbox-example"},"Codesandbox Example"),(0,i.kt)("p",null,"You can check Location Weather example that uses OpenAPI handler with cache transform;"),(0,i.kt)("iframe",{src:"https://codesandbox.io/embed/github/Urigo/graphql-mesh/tree/master/examples/openapi-location-weather?fontsize=14&hidenavigation=1&theme=dark&module=%2F.meshrc.yml",style:{width:"100%",height:"500px",border:"0",borderRadius:"4px",overflow:"hidden"},title:"typescript-location-weather-example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),(0,i.kt)("h2",{id:"config-api-reference"},"Config API Reference"),(0,i.kt)("p",null,(0,i.kt)("ul",{parentName:"p"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"field")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),", required) - The type and field to apply cache to, you can use wild cards as well, for example: ",(0,i.kt)("inlineCode",{parentName:"li"},"Query.*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cacheKey")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") - Cache key to use to store your resolvers responses.\nThe defualt is: {typeName}-{fieldName}-{argsHash}-{fieldNamesHash}")),(0,i.kt)("p",{parentName:"p"},"Available variables:"),(0,i.kt)("ul",{parentName:"p"},(0,i.kt)("li",{parentName:"ul"},"{args.argName} - use resolver argument"),(0,i.kt)("li",{parentName:"ul"},"{typeName} - use name of the type"),(0,i.kt)("li",{parentName:"ul"},"{fieldName} - use name of the field"),(0,i.kt)("li",{parentName:"ul"},"{argsHash} - a hash based on the 'args' object"),(0,i.kt)("li",{parentName:"ul"},"{fieldNamesHash} - a hash based on the field names selected by the client"),(0,i.kt)("li",{parentName:"ul"},"{info} - the GraphQLResolveInfo of the resolver")),(0,i.kt)("p",{parentName:"p"},"Available interpolations:"),(0,i.kt)("ul",{parentName:"p"},(0,i.kt)("li",{parentName:"ul"},"{format|date} - returns the current date with a specific format")),(0,i.kt)("ul",{parentName:"p"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"invalidate")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - Invalidation rules: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"effectingOperations")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of Object"),", required) - Invalidate the cache when a specific operation is done without an error: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"operation")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),", required) - Path to the operation that could effect it. In a form: Mutation.something. Note that wildcard is not supported in this field."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matchKey")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") - Cache key to invalidate on sucessful resolver (no error), see ",(0,i.kt)("inlineCode",{parentName:"li"},"cacheKey")," for list of available options in this field."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ttl")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Int"),") - Specified in seconds, the time-to-live (TTL) value limits the lifespan"))))))}u.isMDXComponent=!0}}]);