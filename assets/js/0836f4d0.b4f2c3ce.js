(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{297:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return g}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=r,g=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?a.a.createElement(g,l(l({ref:t},p),{},{components:n})):a.a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),i=(n(0),n(297)),o={id:"postgraphile",title:"PostgreSQL / PostGraphile",sidebar_label:"PostgreSQL / PostGraphile"},l={unversionedId:"handlers/postgraphile",id:"handlers/postgraphile",isDocsHomePage:!1,title:"PostgreSQL / PostGraphile",description:"image",source:"@site/docs/handlers/postgraphile.md",slug:"/handlers/postgraphile",permalink:"/docs/handlers/postgraphile",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/handlers/postgraphile.md",version:"current",sidebar_label:"PostgreSQL / PostGraphile",sidebar:"sidebar",previous:{title:"JSON Schema",permalink:"/docs/handlers/json-schema"},next:{title:"SOAP",permalink:"/docs/handlers/soap"}},c=[{value:"External Plugins (e.g. Federation)",id:"external-plugins-eg-federation",children:[]},{value:"Config API Reference",id:"config-api-reference",children:[]}],p={toc:c};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/20847995/79219670-5ae06300-7e5b-11ea-81f1-d0c08a884607.png",alt:"image"}))),Object(i.b)("p",null,"This handler allows you to use GraphQL schema created by ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.graphile.org/postgraphile/"}),"PostGraphile"),", based on a PostgreSQL database schema."),Object(i.b)("p",null,"To get started, install the handler library from NPM:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"$ yarn add @graphql-mesh/postgraphile\n")),Object(i.b)("p",null,"Now, you can use it directly in your Mesh config file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"sources:\n  - name: MyDb\n    handler:\n      postgraphile:\n        connectionString: postgres://postgres:password@localhost/postgres\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can check out our example that uses schema stitching with a PostgreSQL datasource.\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb"}),"Click here to open the example on GitHub"))),Object(i.b)("h3",{id:"external-plugins-eg-federation"},"External Plugins (e.g. Federation)"),Object(i.b)("p",null,"You can add PostGraphile plugins such as FederationPlugin and ConnectionFilterPlugin. You can install it using npm or yarn like below;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"yarn add @graphile/federation\n")),Object(i.b)("p",null,"and add those in your configuration file;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),'sources:\n  - name: MyDb\n    handler:\n      postgraphile:\n        connectionString: postgres://postgres:password@localhost/postgres\n        plugins:\n          - "@graphile/federation"\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Use ",Object(i.b)("inlineCode",{parentName:"p"},"FederationPlugin")," only if you are using ",Object(i.b)("inlineCode",{parentName:"p"},"federation")," as merger as in ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/recipes/federation"}),"Federation Recipe"))),Object(i.b)("p",null,Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.graphile.org/postgraphile/extending/"}),"Learn more about PostGraphile plugins")),Object(i.b)("h2",{id:"config-api-reference"},"Config API Reference"),Object(i.b)("p",null,Object(i.b)("ul",{parentName:"p"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"connectionString")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"String"),") - A connection string to your Postgres database"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"schemaName")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"Array of String"),", required) - An array of strings which specifies the PostgreSQL schemas that PostGraphile will use to create a GraphQL schema. The default schema is the public schema."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pool")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"Any"),") - Connection Pool instance or settings or you can provide the path of a code file that exports any of those"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"appendPlugins")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"Array of String"),") - Extra Postgraphile Plugins to append"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"skipPlugins")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"Array of String"),') - Postgraphile Plugins to skip (e.g. "graphile-build#NodePlugin")'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),' -  - Extra Postgraphile options that will be added to the postgraphile constructor. It can either be an object or a string pointing to the object\'s path (e.g. "./my-config#options"). See the ',Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.graphile.org/postgraphile/usage-library/"}),"postgraphile docs")," for more information. One of: ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"JSON")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"String")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"cacheIntrospection")," -  - Cache Introspection One of: ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"object"),": ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ttl")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"Int"),") - Time to live of introspection cache"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"path")," (type: ",Object(i.b)("inlineCode",{parentName:"li"},"String"),") - Path to Introspection JSON File"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Boolean")))))))}s.isMDXComponent=!0}}]);