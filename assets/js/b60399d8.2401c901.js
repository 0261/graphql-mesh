"use strict";(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[574],{5318:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=r,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1931:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=t(5773),r=t(808),o=(t(7378),t(5318)),i=["components"],s={id:"naming-convention",title:"Naming Convention Transform",sidebar_label:"Naming Convention"},l={unversionedId:"transforms/naming-convention",id:"transforms/naming-convention",isDocsHomePage:!1,title:"Naming Convention Transform",description:"The naming-convention transform allow you apply naming convention to GraphQL types and GraphQL fields easily.",source:"@site/docs/transforms/naming-convention.md",sourceDirName:"transforms",slug:"/transforms/naming-convention",permalink:"/docs/transforms/naming-convention",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/transforms/naming-convention.md",version:"current",sidebar_label:"Naming Convention",frontMatter:{id:"naming-convention",title:"Naming Convention Transform",sidebar_label:"Naming Convention"},sidebar:"sidebar",previous:{title:"Filter Schema Transform",permalink:"/docs/transforms/filter-schema"},next:{title:"Type Merging Transform",permalink:"/docs/transforms/type-merging"}},p=[{value:"How to use?",id:"how-to-use",children:[]},{value:"Config API Reference",id:"config-api-reference",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"naming-convention")," transform allow you apply naming convention to GraphQL types and GraphQL fields easily. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @graphql-mesh/transform-naming-convention\n")),(0,o.kt)("h2",{id:"how-to-use"},"How to use?"),(0,o.kt)("p",null,"Add the following configuration to your Mesh config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - namingConvention:\n        typeNames: pascalCase\n        enumValues: upperCase\n        fieldNames: camelCase\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can see our gRPC example that uses this transform to see how it is applied.\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/grpc-example"},"Click here to open the example on GitHub"))),(0,o.kt)("h2",{id:"config-api-reference"},"Config API Reference"),(0,o.kt)("p",null,(0,o.kt)("ul",{parentName:"p"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"typeNames")," (type: ",(0,o.kt)("inlineCode",{parentName:"li"},"String (camelCase | capitalCase | constantCase | dotCase | headerCase | noCase | paramCase | pascalCase | pathCase | sentenceCase | snakeCase | upperCase | lowerCase)"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fieldNames")," (type: ",(0,o.kt)("inlineCode",{parentName:"li"},"String (camelCase | capitalCase | constantCase | dotCase | headerCase | noCase | paramCase | pascalCase | pathCase | sentenceCase | snakeCase | upperCase | lowerCase)"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"enumValues")," (type: ",(0,o.kt)("inlineCode",{parentName:"li"},"String (camelCase | capitalCase | constantCase | dotCase | headerCase | noCase | paramCase | pascalCase | pathCase | sentenceCase | snakeCase | upperCase | lowerCase)"),")"))))}m.isMDXComponent=!0}}]);