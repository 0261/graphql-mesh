(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[8506],{5318:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(7378);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,y=d["".concat(i,".").concat(f)]||d[f]||u[f]||s;return r?n.createElement(y,a(a({ref:t},l),{},{components:r})):n.createElement(y,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5457:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return c},default:function(){return u}});var n=r(9603),o=r(120),s=(r(7378),r(5318)),a=["components"],p={id:"typescript",title:"TypeScript Support",sidebar_label:"TypeScript Support"},i={unversionedId:"recipes/typescript",id:"recipes/typescript",isDocsHomePage:!1,title:"TypeScript Support",description:"GraphQL Mesh supports TypeScript, and you can easily use it to generate typings for the fetched data, and for you custom resolvers that specific under additionalResolvers",source:"@site/docs/recipes/typescript.md",sourceDirName:"recipes",slug:"/recipes/typescript",permalink:"/docs/recipes/typescript",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/typescript.md",version:"current",sidebar_label:"TypeScript Support",frontMatter:{id:"typescript",title:"TypeScript Support",sidebar_label:"TypeScript Support"},sidebar:"sidebar",previous:{title:"Redis Cache",permalink:"/docs/cache/cache-redis"},next:{title:"Mesh as SDK",permalink:"/docs/recipes/as-sdk"}},c=[{value:"Type safety for custom resolvers",id:"type-safety-for-custom-resolvers",children:[]},{value:"Type safety for fetched data",id:"type-safety-for-fetched-data",children:[]}],l={toc:c};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"GraphQL Mesh supports TypeScript, and you can easily use it to generate typings for the fetched data, and for you custom resolvers that specific under ",(0,s.kt)("inlineCode",{parentName:"p"},"additionalResolvers")),(0,s.kt)("h2",{id:"type-safety-for-custom-resolvers"},"Type safety for custom resolvers"),(0,s.kt)("p",null,"GraphQL Mesh allows for API handler packages to provide TypeScript typings in order to have types support in your code."),(0,s.kt)("p",null,"In order to use the TypeScript support, make sure you have the ",(0,s.kt)("inlineCode",{parentName:"p"},"require")," section set in your config file (to allow for the GraphQL Mesh to compile TypeScript files):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"require:\n  - ts-node/register/transpile-only\n\nadditionalResolvers:\n  - ./src/mesh-resolvers.ts  \n")),(0,s.kt)("p",null,"Then, use the CLI command to generate the typings file based on your unified GraphQL schema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"graphql-mesh typescript --output ./src/generated/mesh.ts\n")),(0,s.kt)("p",null,"Now, you can import ",(0,s.kt)("inlineCode",{parentName:"p"},"Resolvers")," interface from the generated file, and use it as the type for your custom resolvers. It will make sure that your parent value, arguments, context type and return value are fully compatible with the implementation. It will also provide fully typed SDK from the context:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Resolvers } from './generated/mesh';\n\nexport const resolvers: Resolvers = {\n  // Your custom resolvers here\n};\n")),(0,s.kt)("h2",{id:"type-safety-for-fetched-data"},"Type safety for fetched data"),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/docs/recipes/as-sdk"},"Mesh as SDK")," section."))}u.isMDXComponent=!0}}]);