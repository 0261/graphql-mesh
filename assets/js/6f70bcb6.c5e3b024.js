(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[9617],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||a;return n?i.createElement(h,o(o({ref:t},d),{},{components:n})):i.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5733:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var i=n(9603),r=n(120),a=(n(7378),n(5318)),o=["components"],l={id:"live-queries",title:"Live Queries",sidebar_label:"Live Queries"},s={unversionedId:"recipes/live-queries",id:"recipes/live-queries",isDocsHomePage:!1,title:"Live Queries",description:"GraphQL Live Query implementation from Laurin Quast can be used in GraphQL Mesh with a few addition in the configuration.",source:"@site/docs/recipes/live-queries.md",sourceDirName:"recipes",slug:"/recipes/live-queries",permalink:"/docs/recipes/live-queries",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/live-queries.md",version:"current",sidebar_label:"Live Queries",frontMatter:{id:"live-queries",title:"Live Queries",sidebar_label:"Live Queries"},sidebar:"sidebar",previous:{title:"Handle Webhooks with GraphQL Subscriptions",permalink:"/docs/recipes/subscriptions-webhooks"},next:{title:"@graphql-mesh/cli",permalink:"/docs/api/modules/cli"}},u=[{value:"Basic Usage",id:"basic-usage",children:[]},{value:"ID Based Invalidation",id:"id-based-invalidation",children:[]},{value:"Programmatic Usage",id:"programmatic-usage",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://raw.githubusercontent.com/n1ru4l/graphql-live-query/main/assets/logo.svg",width:"300",alt:"GraphQL Live Query"}),(0,a.kt)("br",null)),(0,a.kt)("p",null,"GraphQL Live Query implementation from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/n1ru4l"},"Laurin Quast")," can be used in GraphQL Mesh with a few addition in the configuration."),(0,a.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"Let's say you have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Query")," root field that returns all ",(0,a.kt)("inlineCode",{parentName:"p"},"Todo")," entities from your data source like below;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query getTodos {\n    todos {\n        id\n        content\n    }\n}\n")),(0,a.kt)("p",null,"And you want to update this operation result automatically without manual refresh when ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutation.addTodo")," is called."),(0,a.kt)("p",null,"The only thing you need is to add the following configuration to your existing configuration;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"additionalTypeDefs: |\n    directive @live on QUERY\nliveQueryInvalidations:\n    - field: Mutation.addTodo\n      invalidate: \n        - Query.todos\n")),(0,a.kt)("p",null,"Then you can send a live query with ",(0,a.kt)("inlineCode",{parentName:"p"},"@live")," directive;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query getTodos @live {\n    todos {\n        id\n        content\n    }\n}\n")),(0,a.kt)("p",null,"This will start a real-time connection between server and your client, then the response of ",(0,a.kt)("inlineCode",{parentName:"p"},"todos")," will get updated whenever ",(0,a.kt)("inlineCode",{parentName:"p"},"addTodo")," is called."),(0,a.kt)("h3",{id:"id-based-invalidation"},"ID Based Invalidation"),(0,a.kt)("p",null,"Let's say you have the following query that returns specific ",(0,a.kt)("inlineCode",{parentName:"p"},"Todo")," entity based on ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query getTodo($id: ID!) {\n    todo(id: $id) {\n        id\n        content\n    }\n}\n")),(0,a.kt)("p",null,"And you update this entity with ",(0,a.kt)("inlineCode",{parentName:"p"},"editTodo")," mutation field on your backend then you want to invalidate this entity specifically instead of validating all ",(0,a.kt)("inlineCode",{parentName:"p"},"todo")," queries;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"liveQueryInvalidations:\n    - field: Mutation.editTodo\n      invalidate: \n        - Todo:{args.id}\n")),(0,a.kt)("p",null,"In a case where the field resolver resolve null but might resolve to an object type later, e.g. because the visibility got updates the field that uses a specific id argument can be invalidated in the following way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'liveQueryInvalidations:\n    - field: Mutation.editTodo\n      invalidate:\n        - Query.todo(id:"{args.id}")\n')),(0,a.kt)("h3",{id:"programmatic-usage"},"Programmatic Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"liveQueryStore")," is available in GraphQL Context so you can access it in resolvers composition functions that wrap existing resolvers or additional resolvers;"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/transforms/resolvers-composition"},"Resolvers Composition")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n    - resolversComposition:\n        - resolver: Mutation.editTodo\n          composer: invalidate-todo#invalidateTodo\n")),(0,a.kt)("p",null,"And in this code file;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    invalidateTodo: next => (root, args, context, info) => {\n        const result = await next(root, args, context, info);\n        context.liveQueryStore.invalidate(`Todo:${args.id}`);\n        return result;\n    }\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can learn more about ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/n1ru4l/graphql-live-query"},"GraphQL Live Query")," in its documentation.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can check out our example that uses live queries")),(0,a.kt)("iframe",{src:"https://codesandbox.io/embed/github/Urigo/graphql-mesh/tree/master/examples/json-schema-subscriptions?fontsize=14&hidenavigation=1&theme=dark&module=%2F.meshrc.yml",style:{width:"100%",height:"500px",border:"0",borderRadius:"4px",overflow:"hidden"},title:"json-schema-subscriptions",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}))}p.isMDXComponent=!0}}]);