"use strict";(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[2678],{5318:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),h=a,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||o;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6861:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return l},default:function(){return c}});var n=r(5773),a=r(808),o=(r(7378),r(5318)),s=["components"],i={id:"as-sdk",title:"Mesh as SDK",sidebar_label:"Mesh as SDK"},p={unversionedId:"recipes/as-sdk",id:"recipes/as-sdk",isDocsHomePage:!1,title:"Mesh as SDK",description:"You can use GraphQL Mesh as a completely type-safe SDK in your existing TypeScript project.",source:"@site/docs/recipes/as-sdk.md",sourceDirName:"recipes",slug:"/recipes/as-sdk",permalink:"/docs/recipes/as-sdk",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/as-sdk.md",version:"current",sidebar_label:"Mesh as SDK",frontMatter:{id:"as-sdk",title:"Mesh as SDK",sidebar_label:"Mesh as SDK"},sidebar:"sidebar",previous:{title:"TypeScript Support",permalink:"/docs/recipes/typescript"},next:{title:"Mesh as Gateway",permalink:"/docs/recipes/as-gateway"}},l=[{value:"Try those operations in the playground",id:"try-those-operations-in-the-playground",children:[]},{value:"Build your SDK with Mesh artifacts",id:"build-your-sdk-with-mesh-artifacts",children:[]},{value:"Using the generated SDK in the code",id:"using-the-generated-sdk-in-the-code",children:[]}],u={toc:l};function c(e){var t=e.components,i=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use GraphQL Mesh as a completely type-safe SDK in your existing TypeScript project."),(0,o.kt)("p",null,"Instead of using GraphQL operations as string with ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," - you can use GraphQL Mesh and generate a ready-to-use TypeScript SDK to fetch your data. It will make sure to have type-safety and auto-complete for variables and returned data."),(0,o.kt)("p",null,"Create your own GraphQL operations in a ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," file for your SDK, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query myQuery($someVar: String!) {\n  getSomething(var: $someVar) {\n    fieldA\n    fieldB\n  }\n}\n")),(0,o.kt)("p",null,"In this case we only have ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldA")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldB")," in our result so those are not added to the response object anymore."),(0,o.kt)("p",null,"Now, point to those operations in your ",(0,o.kt)("inlineCode",{parentName:"p"},".meshrc.yml"),";"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"sources:\n  ...\n\ndocuments:\n  - ./src/**/*.graphql\n")),(0,o.kt)("h2",{id:"try-those-operations-in-the-playground"},"Try those operations in the playground"),(0,o.kt)("p",null,"You can run ",(0,o.kt)("inlineCode",{parentName:"p"},"mesh dev")," to try your operations in the playground;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn mesh dev\n")),(0,o.kt)("h2",{id:"build-your-sdk-with-mesh-artifacts"},"Build your SDK with Mesh artifacts"),(0,o.kt)("p",null,"This will generate an SDK inside your Mesh artifacts under ",(0,o.kt)("inlineCode",{parentName:"p"},".mesh")," directory;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn mesh build\n")),(0,o.kt)("h2",{id:"using-the-generated-sdk-in-the-code"},"Using the generated SDK in the code"),(0,o.kt)("p",null,"Now, instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," manually, you can use the generated ",(0,o.kt)("inlineCode",{parentName:"p"},"getSdk")," method with your a GraphQL Mesh client, and use the functions that are generated based on your operations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getMeshSdk } from './.mesh';\n\nasync function test() {\n  // Load mesh config and get the sdkClient from it\n  const sdk = await getMeshSdk();\n\n  // Execute `myQuery` and get a type-safe result\n  // Variables and result are typed: { getSomething: { fieldA: string, fieldB: number }, errors?: GraphQLError[] }\n  const { getSomething } = await sdk.myQuery({ someVar: 'foo' });\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can find an example for that ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb#using-the-generated-sdk"},"here"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"GraphQL Mesh",src:r(7571).Z})))}c.isMDXComponent=!0},7571:function(e,t,r){t.Z=r.p+"assets/images/as-sdk-8985d1ad473c203fb07b20e6da4d0085.png"}}]);