"use strict";(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[6885],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(n),k=a,s=d["".concat(p,".").concat(k)]||d[k]||c[k]||i;return n?r.createElement(s,o(o({ref:t},u),{},{components:n})):r.createElement(s,o({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6318:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var r=n(9603),a=n(120),i=(n(7378),n(5318)),o=["components"],l={},p={unversionedId:"generated-markdown/MockingConfig.generated",id:"generated-markdown/MockingConfig.generated",isDocsHomePage:!1,title:"MockingConfig.generated",description:"* if (type: Boolean) - If this expression is truthy, mocking would be enabled",source:"@site/docs/generated-markdown/MockingConfig.generated.md",sourceDirName:"generated-markdown",slug:"/generated-markdown/MockingConfig.generated",permalink:"/docs/generated-markdown/MockingConfig.generated",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/generated-markdown/MockingConfig.generated.md",version:"current",frontMatter:{}},m=[],u={toc:m};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"if")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),") - If this expression is truthy, mocking would be enabled\nYou can use environment variables expression, for example: ",(0,i.kt)("inlineCode",{parentName:"li"},"${MOCKING_ENABLED}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preserveResolvers")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),") - Do not mock any other resolvers other than defined in ",(0,i.kt)("inlineCode",{parentName:"li"},"mocks"),".\nFor example, you can enable this if you don't want to mock entire schema but partially."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mocks")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of Object"),") - Mock configurations: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apply")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),", required) - Resolver path\nExample: User.firstName"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"if")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),") - If this expression is truthy, mocking would be enabled\nYou can use environment variables expression, for example: ",(0,i.kt)("inlineCode",{parentName:"li"},"${MOCKING_ENABLED}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"faker")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") - Faker.js expression or function\nRead more (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/marak/Faker.js/#fakerfake"},"https://github.com/marak/Faker.js/#fakerfake"),')\nExample;\nfaker: name.firstName\nfaker: "{{ name.firstName }} {{ name.lastName }}"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"custom")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),') - Custom mocking\nIt can be a module or json file.\nBoth "moduleName#exportName" or only "moduleName" would work'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"length")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Int"),") - Length of the mock list\nFor the list types ",(0,i.kt)("inlineCode",{parentName:"li"},"[ObjectType]"),", how many ",(0,i.kt)("inlineCode",{parentName:"li"},"ObjectType")," you want to return?\ndefault: 2"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"store")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - Get the data from the mock store: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"ID"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldName")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"updateStore")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of Object"),") - Update the data on the mock store: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"ID"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldName")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),")"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initializeStore")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"),") - The path to the code runs before the store is attached to the schema")))}c.isMDXComponent=!0}}]);