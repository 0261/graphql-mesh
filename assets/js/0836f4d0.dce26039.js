"use strict";(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[8985],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,m=c["".concat(l,".").concat(d)]||c[d]||g[d]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3094:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return g}});var a=n(9603),r=n(120),i=(n(7378),n(5318)),o=["components"],p={id:"postgraphile",title:"PostgreSQL / PostGraphile",sidebar_label:"PostgreSQL / PostGraphile"},l={unversionedId:"handlers/postgraphile",id:"handlers/postgraphile",isDocsHomePage:!1,title:"PostgreSQL / PostGraphile",description:"image",source:"@site/docs/handlers/postgraphile.md",sourceDirName:"handlers",slug:"/handlers/postgraphile",permalink:"/docs/handlers/postgraphile",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/handlers/postgraphile.md",version:"current",sidebar_label:"PostgreSQL / PostGraphile",frontMatter:{id:"postgraphile",title:"PostgreSQL / PostGraphile",sidebar_label:"PostgreSQL / PostGraphile"},sidebar:"sidebar",previous:{title:"JSON Schema or Samples",permalink:"/docs/handlers/json-schema"},next:{title:"SOAP",permalink:"/docs/handlers/soap"}},s=[{value:"External Plugins (e.g. FederationPlugin, PgManyToManyPlugin, PostgisPlugin)",id:"external-plugins-eg-federationplugin-pgmanytomanyplugin-postgisplugin",children:[{value:"Federation and Automatic Type Merging support",id:"federation-and-automatic-type-merging-support",children:[]},{value:"Many-to-Many support",id:"many-to-many-support",children:[]},{value:"PostGIS Support",id:"postgis-support",children:[]}]},{value:"Config API Reference",id:"config-api-reference",children:[]}],u={toc:s};function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/20847995/79219670-5ae06300-7e5b-11ea-81f1-d0c08a884607.png",alt:"image"})),(0,i.kt)("p",null,"This handler allows you to use GraphQL schema created by ",(0,i.kt)("a",{parentName:"p",href:"https://www.graphile.org/postgraphile/"},"PostGraphile"),", based on a PostgreSQL database schema."),(0,i.kt)("p",null,"To get started, install the handler library from NPM:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ yarn add @graphql-mesh/postgraphile\n")),(0,i.kt)("p",null,"Now, you can use it directly in your Mesh config file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"sources:\n  - name: MyDb\n    handler:\n      postgraphile:\n        connectionString: postgres://postgres:password@localhost/postgres\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You can check out our example that uses schema stitching with a PostgreSQL datasource.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb"},"Click here to open the example on GitHub"))),(0,i.kt)("h2",{id:"external-plugins-eg-federationplugin-pgmanytomanyplugin-postgisplugin"},"External Plugins (e.g. FederationPlugin, PgManyToManyPlugin, PostgisPlugin)"),(0,i.kt)("p",null,"You can add ",(0,i.kt)("a",{parentName:"p",href:"https://www.graphile.org/postgraphile/community-plugins/"},"PostGraphile plugins")," for example FederationPlugin. You can install it using npm or yarn like below;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @graphile/federation\n")),(0,i.kt)("p",null,"and add those in your configuration file;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'sources:\n  - name: MyDb\n    handler:\n      postgraphile:\n        connectionString: postgres://postgres:password@localhost/postgres\n        appendPlugins:\n          - "@graphile/federation"\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.graphile.org/postgraphile/extending/"},"Learn more about PostGraphile plugins")),(0,i.kt)("h3",{id:"federation-and-automatic-type-merging-support"},"Federation and Automatic Type Merging support"),(0,i.kt)("p",null,"Federation plugin converts your Postgraphile schema into a federated schema that can also be recognized by Stitching and this brings Automatic Type Merging. So you can install ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphile/federation")," package like above and add it under ",(0,i.kt)("inlineCode",{parentName:"p"},"appendPlugins")),(0,i.kt)("h3",{id:"many-to-many-support"},"Many-to-Many support"),(0,i.kt)("p",null,"If you want to have automatic many-to-many mapping across your entities. You can install ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphile-contrib/pg-many-to-many")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn add @graphile-contrib/pg-many-to-many")," and add it under ",(0,i.kt)("inlineCode",{parentName:"p"},"appendPlugins")),(0,i.kt)("h3",{id:"postgis-support"},"PostGIS Support"),(0,i.kt)("p",null,"If you use ",(0,i.kt)("inlineCode",{parentName:"p"},"PostGIS")," in your PostgreSQL database, you need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"@graphile/postgis")," package and add it under ",(0,i.kt)("inlineCode",{parentName:"p"},"appendPlugins"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"See more ",(0,i.kt)("a",{parentName:"p",href:"https://www.graphile.org/postgraphile/community-plugins/"},"plugins")," to improve the experience!")),(0,i.kt)("h2",{id:"config-api-reference"},"Config API Reference"),(0,i.kt)("p",null,(0,i.kt)("ul",{parentName:"p"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connectionString")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") - A connection string to your Postgres database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"schemaName")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of String"),", required) - An array of strings which specifies the PostgreSQL schemas that PostGraphile will use to create a GraphQL schema. The default schema is the public schema."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pool")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Any"),") - Connection Pool instance or settings or you can provide the path of a code file that exports any of those"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"appendPlugins")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of String"),") - Extra Postgraphile Plugins to append"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"skipPlugins")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Array of String"),') - Postgraphile Plugins to skip (e.g. "graphile-build#NodePlugin")'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),' -  - Extra Postgraphile options that will be added to the postgraphile constructor. It can either be an object or a string pointing to the object\'s path (e.g. "./my-config#options"). See the ',(0,i.kt)("a",{parentName:"li",href:"https://www.graphile.org/postgraphile/usage-library/"},"postgraphile docs")," for more information. One of: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSON")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"String")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subscriptions")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),") - Enable GraphQL websocket transport support for subscriptions (default: true)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"live")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"Boolean"),") - Enables live-query support via GraphQL subscriptions (sends updated payload any time nested collections/records change) (default: true)"))))}g.isMDXComponent=!0}}]);