"use strict";(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[2678],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6861:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var r=n(5773),a=n(808),o=(n(7378),n(5318)),i=["components"],s={id:"as-sdk",title:"Mesh as SDK",sidebar_label:"Mesh as SDK"},l={unversionedId:"recipes/as-sdk",id:"recipes/as-sdk",isDocsHomePage:!1,title:"Mesh as SDK",description:"You can use GraphQL Mesh as a completely type-safe SDK in your existing TypeScript project.",source:"@site/docs/recipes/as-sdk.md",sourceDirName:"recipes",slug:"/recipes/as-sdk",permalink:"/docs/recipes/as-sdk",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/as-sdk.md",version:"current",sidebar_label:"Mesh as SDK",frontMatter:{id:"as-sdk",title:"Mesh as SDK",sidebar_label:"Mesh as SDK"},sidebar:"sidebar",previous:{title:"TypeScript Support",permalink:"/docs/recipes/typescript"},next:{title:"Mesh as Gateway",permalink:"/docs/recipes/as-gateway"}},p=[{value:"Try those operations in the playground",id:"try-those-operations-in-the-playground",children:[]},{value:"Generate operations automatically",id:"generate-operations-automatically",children:[]},{value:"Build your SDK with Mesh artifacts",id:"build-your-sdk-with-mesh-artifacts",children:[]},{value:"Using the generated SDK in the code",id:"using-the-generated-sdk-in-the-code",children:[]}],u={toc:p};function c(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can use GraphQL Mesh as a completely type-safe SDK in your existing TypeScript project."),(0,o.kt)("p",null,"Instead of using GraphQL operations as string with ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," - you can use GraphQL Mesh and generate a ready-to-use TypeScript SDK to fetch your data. It will make sure to have type-safety and auto-complete for variables and returned data."),(0,o.kt)("p",null,"Create your own GraphQL operations in a ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," file for your SDK, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query myQuery($someVar: String!) {\n  getSomething(var: $someVar) {\n    fieldA\n    fieldB\n  }\n}\n")),(0,o.kt)("p",null,"In this case we only have ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldA")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldB")," in our result so those are not added to the response object anymore."),(0,o.kt)("p",null,"Now, point to those operations in your ",(0,o.kt)("inlineCode",{parentName:"p"},".meshrc.yml"),";"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"sources:\n  ...\n\ndocuments:\n  - ./src/**/*.graphql\n")),(0,o.kt)("h2",{id:"try-those-operations-in-the-playground"},"Try those operations in the playground"),(0,o.kt)("p",null,"You can run ",(0,o.kt)("inlineCode",{parentName:"p"},"mesh dev")," to try your operations in the playground;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn mesh dev\n")),(0,o.kt)("h2",{id:"generate-operations-automatically"},"Generate operations automatically"),(0,o.kt)("p",null,"Mesh can generate the operations for you if you don't want to use manually written operations. Just add the following to your configuration;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"sdk:\n  generateOperations:\n     selectionSetDepth: 2 # This is the maximum level of selection set\n")),(0,o.kt)("h2",{id:"build-your-sdk-with-mesh-artifacts"},"Build your SDK with Mesh artifacts"),(0,o.kt)("p",null,"This will generate an SDK inside your Mesh artifacts under ",(0,o.kt)("inlineCode",{parentName:"p"},".mesh")," directory;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn mesh build\n")),(0,o.kt)("h2",{id:"using-the-generated-sdk-in-the-code"},"Using the generated SDK in the code"),(0,o.kt)("p",null,"Now, instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},"execute")," manually, you can use the generated ",(0,o.kt)("inlineCode",{parentName:"p"},"getSdk")," method with your a GraphQL Mesh client, and use the functions that are generated based on your operations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getMeshSdk } from './.mesh';\n\nasync function test() {\n  // Load mesh config and get the sdkClient from it\n  const sdk = await getMeshSdk();\n\n  // Execute `myQuery` and get a type-safe result\n  // Variables and result are typed: { getSomething: { fieldA: string, fieldB: number }, errors?: GraphQLError[] }\n  const { getSomething } = await sdk.myQuery({ someVar: 'foo' });\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can find an example for that ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb#using-the-generated-sdk"},"here"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"GraphQL Mesh",src:n(7571).Z})))}c.isMDXComponent=!0},7571:function(e,t,n){t.Z=n.p+"assets/images/as-sdk-8985d1ad473c203fb07b20e6da4d0085.png"}}]);