(self.webpackChunk_graphql_mesh_website=self.webpackChunk_graphql_mesh_website||[]).push([[6087],{5318:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7378);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),f=s(t),m=o,d=f["".concat(l,".").concat(m)]||f[m]||c[m]||a;return t?n.createElement(d,i(i({ref:r},u),{},{components:t})):n.createElement(d,i({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9551:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var n=t(9603),o=t(120),a=(t(7378),t(5318)),i=["components"],p={id:"prefix",title:"Prefix Transform",sidebar_label:"Prefix"},l={unversionedId:"transforms/prefix",id:"transforms/prefix",isDocsHomePage:!1,title:"Prefix Transform",description:"The prefix transform allow you prefix GraphQL types and GraphQL root operations (under Query/Mutation).",source:"@site/docs/transforms/prefix.md",sourceDirName:"transforms",slug:"/transforms/prefix",permalink:"/docs/transforms/prefix",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/transforms/prefix.md",version:"current",sidebar_label:"Prefix",frontMatter:{id:"prefix",title:"Prefix Transform",sidebar_label:"Prefix"},sidebar:"sidebar",previous:{title:"Rename Transform",permalink:"/docs/transforms/rename"},next:{title:"Encapsulate Transform",permalink:"/docs/transforms/encapsulate"}},s=[{value:"How to use?",id:"how-to-use",children:[]},{value:"Config API Reference",id:"config-api-reference",children:[]}],u={toc:s};function c(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"prefix")," transform allow you prefix GraphQL types and GraphQL root operations (under ",(0,a.kt)("inlineCode",{parentName:"p"},"Query/Mutation"),"). "),(0,a.kt)("p",null,'You can use it to easily "namespace" APIs in your unified API and avoid conflicts. '),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn add @graphql-mesh/transform-prefix\n")),(0,a.kt)("h2",{id:"how-to-use"},"How to use?"),(0,a.kt)("p",null,"Add the following configuration to your Mesh config file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"transforms:\n  - prefix:\n      value: MyApi_\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can check out our example that uses schema stitching with a PostgreSQL datasource and prefix transform.\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Urigo/graphql-mesh/tree/master/examples/postgres-geodb"},"Click here to open the example on GitHub"))),(0,a.kt)("h2",{id:"config-api-reference"},"Config API Reference"),(0,a.kt)("p",null,(0,a.kt)("ul",{parentName:"p"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," (type: ",(0,a.kt)("inlineCode",{parentName:"li"},"String"),") - The prefix to apply to the schema types. By default it's the API name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ignore")," (type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Array of String"),", required) - List of ignored types"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"includeRootOperations")," (type: ",(0,a.kt)("inlineCode",{parentName:"li"},"Boolean"),") - Changes root types and changes the field names"))))}c.isMDXComponent=!0}}]);