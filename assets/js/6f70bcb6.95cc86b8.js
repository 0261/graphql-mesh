(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{174:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),i=(n(0),n(297)),o={id:"live-queries",title:"Live Queries",sidebar_label:"Live Queries"},l={unversionedId:"recipes/live-queries",id:"recipes/live-queries",isDocsHomePage:!1,title:"Live Queries",description:"GraphQL Live Query implementation from Laurin Quast can be used in GraphQL Mesh with a few addition in the configuration.",source:"@site/docs/recipes/live-queries.md",slug:"/recipes/live-queries",permalink:"/docs/recipes/live-queries",editUrl:"https://github.com/urigo/graphql-mesh/edit/master/website/docs/recipes/live-queries.md",version:"current",sidebar_label:"Live Queries",sidebar:"sidebar",previous:{title:"Handle Webhooks with GraphQL Subscriptions",permalink:"/docs/recipes/subscriptions-webhooks"},next:{title:"@graphql-mesh/cli",permalink:"/docs/api/modules/cli"}},c=[{value:"Basic Usage",id:"basic-usage",children:[]},{value:"ID Based Invalidation",id:"id-based-invalidation",children:[]},{value:"Programmatic Usage",id:"programmatic-usage",children:[]}],s={toc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"https://raw.githubusercontent.com/n1ru4l/graphql-live-query/main/assets/logo.svg",width:"300",alt:"GraphQL Live Query"}),Object(i.b)("br",null)),Object(i.b)("p",null,"GraphQL Live Query implementation from ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/n1ru4l"}),"Laurin Quast")," can be used in GraphQL Mesh with a few addition in the configuration."),Object(i.b)("h3",{id:"basic-usage"},"Basic Usage"),Object(i.b)("p",null,"Let's say you have a ",Object(i.b)("inlineCode",{parentName:"p"},"Query")," root field that returns all ",Object(i.b)("inlineCode",{parentName:"p"},"Todo")," entities from your data source like below;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query getTodos {\n    todos {\n        id\n        content\n    }\n}\n")),Object(i.b)("p",null,"And you want to update this operation result automatically without manual refresh when ",Object(i.b)("inlineCode",{parentName:"p"},"Mutation.addTodo")," is called."),Object(i.b)("p",null,"The only thing you need is to add the following configuration to your existing configuration;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"liveQueryInvalidations:\n    - field: Mutation.addTodo\n      invalidate: \n        - Query.todos\n")),Object(i.b)("p",null,"Then you can send a live query with ",Object(i.b)("inlineCode",{parentName:"p"},"@live")," directive;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query getTodos @live {\n    todos {\n        id\n        content\n    }\n}\n")),Object(i.b)("p",null,"This will start a real-time connection between server and your client, then the response of ",Object(i.b)("inlineCode",{parentName:"p"},"todos")," will get updated whenever ",Object(i.b)("inlineCode",{parentName:"p"},"addTodo")," is called."),Object(i.b)("h3",{id:"id-based-invalidation"},"ID Based Invalidation"),Object(i.b)("p",null,"Let's say you have the following query that returns specific ",Object(i.b)("inlineCode",{parentName:"p"},"Todo")," entity based on ",Object(i.b)("inlineCode",{parentName:"p"},"id")," field;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query getTodo($id: ID!) {\n    todo(id: $id) {]\n        id\n        content\n    }\n}\n")),Object(i.b)("p",null,"And you update this entity with ",Object(i.b)("inlineCode",{parentName:"p"},"editTodo")," mutation field on your backend then you want to invalidate this entity specifically instead of validating all ",Object(i.b)("inlineCode",{parentName:"p"},"todo")," queries;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"liveQueryInvalidations:\n    - field: Mutation.editTodo\n      invalidate: \n        - Todo:{args.id}\n")),Object(i.b)("h3",{id:"programmatic-usage"},"Programmatic Usage"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"liveQueryStore")," is available in GraphQL Context so you can access it in resolvers composition functions that wrap existing resolvers or additional resolvers;"),Object(i.b)("p",null,"See ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/transforms/resolvers-composition"}),"Resolvers Composition")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"transforms:\n    - resolversComposition:\n        - resolver: Mutation.editTodo\n          composer: invalidate-todo#invalidateTodo\n")),Object(i.b)("p",null,"And in this code file;"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n    invalidateTodo: next => (root, args, context, info) => {\n        const result = await next(root, args, context, info);\n        context.liveQueryStore.invalidate(`Todo:${args.id}`);\n        return result;\n    }\n}\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can learn more about ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/n1ru4l/graphql-live-query"}),"GraphQL Live Query")," in its documentation.")))}u.isMDXComponent=!0},297:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||i;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);