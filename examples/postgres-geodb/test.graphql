input Gh_AcceptEnterpriseAdministratorInvitationInput {
  invitationId: ID!
  clientMutationId: String
}

type Gh_AcceptEnterpriseAdministratorInvitationPayload {
  clientMutationId: String
  invitation: Gh_EnterpriseAdministratorInvitation
  message: String
}

input Gh_AcceptTopicSuggestionInput {
  repositoryId: ID!
  name: String!
  clientMutationId: String
}

type Gh_AcceptTopicSuggestionPayload {
  clientMutationId: String
  topic: Gh_Topic
}

enum Gh_ActionExecutionCapabilitySetting {
  DISABLED
  ALL_ACTIONS
  LOCAL_ACTIONS_ONLY
  NO_POLICY
}

interface Gh_Actor {
  avatarUrl(size: Int): Gh_URI!
  login: String!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

type Gh_ActorLocation {
  city: String
  country: String
  countryCode: String
  region: String
  regionCode: String
}

input Gh_AddAssigneesToAssignableInput {
  assignableId: ID!
  assigneeIds: [ID!]!
  clientMutationId: String
}

type Gh_AddAssigneesToAssignablePayload {
  assignable: Gh_Assignable
  clientMutationId: String
}

input Gh_AddCommentInput {
  subjectId: ID!
  body: String!
  clientMutationId: String
}

type Gh_AddCommentPayload {
  clientMutationId: String
  commentEdge: Gh_IssueCommentEdge
  subject: Gh_Node
  timelineEdge: Gh_IssueTimelineItemEdge
}

type Gh_AddedToProjectEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

input Gh_AddLabelsToLabelableInput {
  labelableId: ID!
  labelIds: [ID!]!
  clientMutationId: String
}

type Gh_AddLabelsToLabelablePayload {
  clientMutationId: String
  labelable: Gh_Labelable
}

input Gh_AddProjectCardInput {
  projectColumnId: ID!
  contentId: ID
  note: String
  clientMutationId: String
}

type Gh_AddProjectCardPayload {
  cardEdge: Gh_ProjectCardEdge
  clientMutationId: String
  projectColumn: Gh_ProjectColumn
}

input Gh_AddProjectColumnInput {
  projectId: ID!
  name: String!
  clientMutationId: String
}

type Gh_AddProjectColumnPayload {
  clientMutationId: String
  columnEdge: Gh_ProjectColumnEdge
  project: Gh_Project
}

input Gh_AddPullRequestReviewCommentInput {
  pullRequestId: ID
  pullRequestReviewId: ID
  commitOID: Gh_GitObjectID
  body: String!
  path: String
  position: Int
  inReplyTo: ID
  clientMutationId: String
}

type Gh_AddPullRequestReviewCommentPayload {
  clientMutationId: String
  comment: Gh_PullRequestReviewComment
  commentEdge: Gh_PullRequestReviewCommentEdge
}

input Gh_AddPullRequestReviewInput {
  pullRequestId: ID!
  commitOID: Gh_GitObjectID
  body: String
  event: Gh_PullRequestReviewEvent
  comments: [Gh_DraftPullRequestReviewComment]
  clientMutationId: String
}

type Gh_AddPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
  reviewEdge: Gh_PullRequestReviewEdge
}

input Gh_AddReactionInput {
  subjectId: ID!
  content: Gh_ReactionContent!
  clientMutationId: String
}

type Gh_AddReactionPayload {
  clientMutationId: String
  reaction: Gh_Reaction
  subject: Gh_Reactable
}

input Gh_AddStarInput {
  starrableId: ID!
  clientMutationId: String
}

type Gh_AddStarPayload {
  clientMutationId: String
  starrable: Gh_Starrable
}

type Gh_App implements Gh_Node {
  createdAt: Gh_DateTime!
  databaseId: Int
  description: String
  id: ID!
  logoBackgroundColor: String!
  logoUrl(size: Int): Gh_URI!
  name: String!
  slug: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

input Gh_ArchiveRepositoryInput {
  repositoryId: ID!
  clientMutationId: String
}

type Gh_ArchiveRepositoryPayload {
  clientMutationId: String
  repository: Gh_Repository
}

interface Gh_Assignable {
  assignees(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
}

type Gh_AssignedEvent implements Gh_Node {
  actor: Gh_Actor
  assignable: Gh_Assignable!
  assignee: Gh_Assignee
  createdAt: Gh_DateTime!
  id: ID!
  user: Gh_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

union Gh_Assignee = Gh_Bot | Gh_Mannequin | Gh_Organization | Gh_User

interface Gh_AuditEntry {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  operationType: Gh_OperationType
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

union Gh_AuditEntryActor = Gh_Bot | Gh_Organization | Gh_User

input Gh_AuditLogOrder {
  field: Gh_AuditLogOrderField
  direction: Gh_OrderDirection
}

enum Gh_AuditLogOrderField {
  CREATED_AT
}

type Gh_BaseRefChangedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

type Gh_BaseRefForcePushedEvent implements Gh_Node {
  actor: Gh_Actor
  afterCommit: Gh_Commit
  beforeCommit: Gh_Commit
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
  ref: Gh_Ref
}

type Gh_Blame {
  ranges: [Gh_BlameRange!]!
}

type Gh_BlameRange {
  age: Int!
  commit: Gh_Commit!
  endingLine: Int!
  startingLine: Int!
}

type Gh_Bot implements Gh_Node & Gh_Actor & Gh_UniformResourceLocatable {
  avatarUrl(size: Int): Gh_URI!
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
  login: String!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

type Gh_BranchProtectionRule implements Gh_Node {
  branchProtectionRuleConflicts(after: String, before: String, first: Int, last: Int): Gh_BranchProtectionRuleConflictConnection!
  creator: Gh_Actor
  databaseId: Int
  dismissesStaleReviews: Boolean!
  id: ID!
  isAdminEnforced: Boolean!
  matchingRefs(after: String, before: String, first: Int, last: Int): Gh_RefConnection!
  pattern: String!
  pushAllowances(after: String, before: String, first: Int, last: Int): Gh_PushAllowanceConnection!
  repository: Gh_Repository
  requiredApprovingReviewCount: Int
  requiredStatusCheckContexts: [String]
  requiresApprovingReviews: Boolean!
  requiresCodeOwnerReviews: Boolean!
  requiresCommitSignatures: Boolean!
  requiresStatusChecks: Boolean!
  requiresStrictStatusChecks: Boolean!
  restrictsPushes: Boolean!
  restrictsReviewDismissals: Boolean!
  reviewDismissalAllowances(after: String, before: String, first: Int, last: Int): Gh_ReviewDismissalAllowanceConnection!
}

type Gh_BranchProtectionRuleConflict {
  branchProtectionRule: Gh_BranchProtectionRule
  conflictingBranchProtectionRule: Gh_BranchProtectionRule
  ref: Gh_Ref
}

type Gh_BranchProtectionRuleConflictConnection {
  edges: [Gh_BranchProtectionRuleConflictEdge]
  nodes: [Gh_BranchProtectionRuleConflict]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_BranchProtectionRuleConflictEdge {
  cursor: String!
  node: Gh_BranchProtectionRuleConflict
}

type Gh_BranchProtectionRuleConnection {
  edges: [Gh_BranchProtectionRuleEdge]
  nodes: [Gh_BranchProtectionRule]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_BranchProtectionRuleEdge {
  cursor: String!
  node: Gh_BranchProtectionRule
}

input Gh_CancelEnterpriseAdminInvitationInput {
  invitationId: ID!
  clientMutationId: String
}

type Gh_CancelEnterpriseAdminInvitationPayload {
  clientMutationId: String
  invitation: Gh_EnterpriseAdministratorInvitation
  message: String
}

input Gh_ChangeUserStatusInput {
  emoji: String
  message: String
  organizationId: ID
  limitedAvailability: Boolean = false
  expiresAt: Gh_DateTime
  clientMutationId: String
}

type Gh_ChangeUserStatusPayload {
  clientMutationId: String
  status: Gh_UserStatus
}

input Gh_ClearLabelsFromLabelableInput {
  labelableId: ID!
  clientMutationId: String
}

type Gh_ClearLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Gh_Labelable
}

input Gh_CloneProjectInput {
  targetOwnerId: ID!
  sourceId: ID!
  includeWorkflows: Boolean!
  name: String!
  body: String
  public: Boolean
  clientMutationId: String
}

type Gh_CloneProjectPayload {
  clientMutationId: String
  jobStatusId: String
  project: Gh_Project
}

input Gh_CloneTemplateRepositoryInput {
  repositoryId: ID!
  name: String!
  ownerId: ID!
  description: String
  visibility: Gh_RepositoryVisibility!
  clientMutationId: String
}

type Gh_CloneTemplateRepositoryPayload {
  clientMutationId: String
  repository: Gh_Repository
}

interface Gh_Closable {
  closed: Boolean!
  closedAt: Gh_DateTime
}

type Gh_ClosedEvent implements Gh_Node & Gh_UniformResourceLocatable {
  actor: Gh_Actor
  closable: Gh_Closable!
  closer: Gh_Closer
  createdAt: Gh_DateTime!
  id: ID!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

input Gh_CloseIssueInput {
  issueId: ID!
  clientMutationId: String
}

type Gh_CloseIssuePayload {
  clientMutationId: String
  issue: Gh_Issue
}

input Gh_ClosePullRequestInput {
  pullRequestId: ID!
  clientMutationId: String
}

type Gh_ClosePullRequestPayload {
  clientMutationId: String
  pullRequest: Gh_PullRequest
}

union Gh_Closer = Gh_Commit | Gh_PullRequest

type Gh_CodeOfConduct implements Gh_Node {
  body: String
  id: ID!
  key: String!
  name: String!
  resourcePath: Gh_URI
  url: Gh_URI
}

enum Gh_CollaboratorAffiliation {
  OUTSIDE
  DIRECT
  ALL
}

interface Gh_Comment {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: Gh_DateTime
  publishedAt: Gh_DateTime
  updatedAt: Gh_DateTime!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerDidAuthor: Boolean!
}

enum Gh_CommentAuthorAssociation {
  MEMBER
  OWNER
  COLLABORATOR
  CONTRIBUTOR
  FIRST_TIME_CONTRIBUTOR
  FIRST_TIMER
  NONE
}

enum Gh_CommentCannotUpdateReason {
  ARCHIVED
  INSUFFICIENT_ACCESS
  LOCKED
  LOGIN_REQUIRED
  MAINTENANCE
  VERIFIED_EMAIL_REQUIRED
  DENIED
}

type Gh_CommentDeletedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

type Gh_Commit implements Gh_Node & Gh_GitObject & Gh_Subscribable & Gh_UniformResourceLocatable {
  abbreviatedOid: String!
  additions: Int!
  associatedPullRequests(after: String, before: String, first: Int, last: Int, orderBy: Gh_PullRequestOrder = {field: CREATED_AT, direction: ASC}): Gh_PullRequestConnection
  author: Gh_GitActor
  authoredByCommitter: Boolean!
  authoredDate: Gh_DateTime!
  blame(path: String!): Gh_Blame!
  changedFiles: Int!
  comments(after: String, before: String, first: Int, last: Int): Gh_CommitCommentConnection!
  commitResourcePath: Gh_URI!
  commitUrl: Gh_URI!
  committedDate: Gh_DateTime!
  committedViaWeb: Boolean!
  committer: Gh_GitActor
  deletions: Int!
  deployments(environments: [String!], orderBy: Gh_DeploymentOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_DeploymentConnection
  history(after: String, before: String, first: Int, last: Int, path: String, author: Gh_CommitAuthor, since: Gh_GitTimestamp, until: Gh_GitTimestamp): Gh_CommitHistoryConnection!
  id: ID!
  message: String!
  messageBody: String!
  messageBodyHTML: Gh_HTML!
  messageHeadline: String!
  messageHeadlineHTML: Gh_HTML!
  oid: Gh_GitObjectID!
  parents(after: String, before: String, first: Int, last: Int): Gh_CommitConnection!
  pushedDate: Gh_DateTime
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  signature: Gh_GitSignature
  status: Gh_Status
  tarballUrl: Gh_URI!
  tree: Gh_Tree!
  treeResourcePath: Gh_URI!
  treeUrl: Gh_URI!
  url: Gh_URI!
  viewerCanSubscribe: Boolean!
  viewerSubscription: Gh_SubscriptionState
  zipballUrl: Gh_URI!
}

input Gh_CommitAuthor {
  id: ID
  emails: [String!]
}

type Gh_CommitComment implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Updatable & Gh_UpdatableComment & Gh_Reactable & Gh_RepositoryNode {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  commit: Gh_Commit
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: Gh_DateTime
  minimizedReason: String
  path: String
  position: Int
  publishedAt: Gh_DateTime
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_CommitCommentConnection {
  edges: [Gh_CommitCommentEdge]
  nodes: [Gh_CommitComment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CommitCommentEdge {
  cursor: String!
  node: Gh_CommitComment
}

type Gh_CommitCommentThread implements Gh_Node & Gh_RepositoryNode {
  comments(after: String, before: String, first: Int, last: Int): Gh_CommitCommentConnection!
  commit: Gh_Commit
  id: ID!
  path: String
  position: Int
  repository: Gh_Repository!
}

type Gh_CommitConnection {
  edges: [Gh_CommitEdge]
  nodes: [Gh_Commit]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

input Gh_CommitContributionOrder {
  field: Gh_CommitContributionOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_CommitContributionOrderField {
  OCCURRED_AT
  COMMIT_COUNT
}

type Gh_CommitContributionsByRepository {
  contributions(after: String, before: String, first: Int, last: Int, orderBy: Gh_CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedCommitContributionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

type Gh_CommitEdge {
  cursor: String!
  node: Gh_Commit
}

type Gh_CommitHistoryConnection {
  edges: [Gh_CommitEdge]
  nodes: [Gh_Commit]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ConnectedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: Gh_ReferencedSubject!
  subject: Gh_ReferencedSubject!
}

interface Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_ContributionCalendar {
  colors: [String!]!
  isHalloween: Boolean!
  months: [Gh_ContributionCalendarMonth!]!
  totalContributions: Int!
  weeks: [Gh_ContributionCalendarWeek!]!
}

type Gh_ContributionCalendarDay {
  color: String!
  contributionCount: Int!
  date: Gh_Date!
  weekday: Int!
}

type Gh_ContributionCalendarMonth {
  firstDay: Gh_Date!
  name: String!
  totalWeeks: Int!
  year: Int!
}

type Gh_ContributionCalendarWeek {
  contributionDays: [Gh_ContributionCalendarDay!]!
  firstDay: Gh_Date!
}

input Gh_ContributionOrder {
  field: Gh_ContributionOrderField
  direction: Gh_OrderDirection!
}

enum Gh_ContributionOrderField {
  OCCURRED_AT
}

type Gh_ContributionsCollection {
  commitContributionsByRepository(maxRepositories: Int = 25): [Gh_CommitContributionsByRepository!]!
  contributionCalendar: Gh_ContributionCalendar!
  contributionYears: [Int!]!
  doesEndInCurrentMonth: Boolean!
  earliestRestrictedContributionDate: Gh_Date
  endedAt: Gh_DateTime!
  firstIssueContribution: Gh_CreatedIssueOrRestrictedContribution
  firstPullRequestContribution: Gh_CreatedPullRequestOrRestrictedContribution
  firstRepositoryContribution: Gh_CreatedRepositoryOrRestrictedContribution
  hasActivityInThePast: Boolean!
  hasAnyContributions: Boolean!
  hasAnyRestrictedContributions: Boolean!
  isSingleDay: Boolean!
  issueContributions(after: String, before: String, first: Int, last: Int, excludeFirst: Boolean = false, excludePopular: Boolean = false, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedIssueContributionConnection!
  issueContributionsByRepository(maxRepositories: Int = 25, excludeFirst: Boolean = false, excludePopular: Boolean = false): [Gh_IssueContributionsByRepository!]!
  joinedGitHubContribution: Gh_JoinedGitHubContribution
  latestRestrictedContributionDate: Gh_Date
  mostRecentCollectionWithActivity: Gh_ContributionsCollection
  mostRecentCollectionWithoutActivity: Gh_ContributionsCollection
  popularIssueContribution: Gh_CreatedIssueContribution
  popularPullRequestContribution: Gh_CreatedPullRequestContribution
  pullRequestContributions(after: String, before: String, first: Int, last: Int, excludeFirst: Boolean = false, excludePopular: Boolean = false, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedPullRequestContributionConnection!
  pullRequestContributionsByRepository(maxRepositories: Int = 25, excludeFirst: Boolean = false, excludePopular: Boolean = false): [Gh_PullRequestContributionsByRepository!]!
  pullRequestReviewContributions(after: String, before: String, first: Int, last: Int, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedPullRequestReviewContributionConnection!
  pullRequestReviewContributionsByRepository(maxRepositories: Int = 25): [Gh_PullRequestReviewContributionsByRepository!]!
  repositoryContributions(after: String, before: String, first: Int, last: Int, excludeFirst: Boolean = false, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedRepositoryContributionConnection!
  restrictedContributionsCount: Int!
  startedAt: Gh_DateTime!
  totalCommitContributions: Int!
  totalIssueContributions(excludeFirst: Boolean = false, excludePopular: Boolean = false): Int!
  totalPullRequestContributions(excludeFirst: Boolean = false, excludePopular: Boolean = false): Int!
  totalPullRequestReviewContributions: Int!
  totalRepositoriesWithContributedCommits: Int!
  totalRepositoriesWithContributedIssues(excludeFirst: Boolean = false, excludePopular: Boolean = false): Int!
  totalRepositoriesWithContributedPullRequestReviews: Int!
  totalRepositoriesWithContributedPullRequests(excludeFirst: Boolean = false, excludePopular: Boolean = false): Int!
  totalRepositoryContributions(excludeFirst: Boolean = false): Int!
  user: Gh_User!
}

type Gh_ConvertedNoteToIssueEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

input Gh_ConvertProjectCardNoteToIssueInput {
  projectCardId: ID!
  repositoryId: ID!
  title: String
  body: String
  clientMutationId: String
}

type Gh_ConvertProjectCardNoteToIssuePayload {
  clientMutationId: String
  projectCard: Gh_ProjectCard
}

input Gh_CreateBranchProtectionRuleInput {
  repositoryId: ID!
  pattern: String!
  requiresApprovingReviews: Boolean
  requiredApprovingReviewCount: Int
  requiresCommitSignatures: Boolean
  isAdminEnforced: Boolean
  requiresStatusChecks: Boolean
  requiresStrictStatusChecks: Boolean
  requiresCodeOwnerReviews: Boolean
  dismissesStaleReviews: Boolean
  restrictsReviewDismissals: Boolean
  reviewDismissalActorIds: [ID!]
  restrictsPushes: Boolean
  pushActorIds: [ID!]
  requiredStatusCheckContexts: [String!]
  clientMutationId: String
}

type Gh_CreateBranchProtectionRulePayload {
  branchProtectionRule: Gh_BranchProtectionRule
  clientMutationId: String
}

type Gh_CreatedCommitContribution implements Gh_Contribution {
  commitCount: Int!
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_CreatedCommitContributionConnection {
  edges: [Gh_CreatedCommitContributionEdge]
  nodes: [Gh_CreatedCommitContribution]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CreatedCommitContributionEdge {
  cursor: String!
  node: Gh_CreatedCommitContribution
}

type Gh_CreatedIssueContribution implements Gh_Contribution {
  isRestricted: Boolean!
  issue: Gh_Issue!
  occurredAt: Gh_DateTime!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_CreatedIssueContributionConnection {
  edges: [Gh_CreatedIssueContributionEdge]
  nodes: [Gh_CreatedIssueContribution]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CreatedIssueContributionEdge {
  cursor: String!
  node: Gh_CreatedIssueContribution
}

union Gh_CreatedIssueOrRestrictedContribution = Gh_CreatedIssueContribution | Gh_RestrictedContribution

type Gh_CreatedPullRequestContribution implements Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  pullRequest: Gh_PullRequest!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_CreatedPullRequestContributionConnection {
  edges: [Gh_CreatedPullRequestContributionEdge]
  nodes: [Gh_CreatedPullRequestContribution]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CreatedPullRequestContributionEdge {
  cursor: String!
  node: Gh_CreatedPullRequestContribution
}

union Gh_CreatedPullRequestOrRestrictedContribution = Gh_CreatedPullRequestContribution | Gh_RestrictedContribution

type Gh_CreatedPullRequestReviewContribution implements Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  pullRequest: Gh_PullRequest!
  pullRequestReview: Gh_PullRequestReview!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_CreatedPullRequestReviewContributionConnection {
  edges: [Gh_CreatedPullRequestReviewContributionEdge]
  nodes: [Gh_CreatedPullRequestReviewContribution]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CreatedPullRequestReviewContributionEdge {
  cursor: String!
  node: Gh_CreatedPullRequestReviewContribution
}

type Gh_CreatedRepositoryContribution implements Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_CreatedRepositoryContributionConnection {
  edges: [Gh_CreatedRepositoryContributionEdge]
  nodes: [Gh_CreatedRepositoryContribution]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_CreatedRepositoryContributionEdge {
  cursor: String!
  node: Gh_CreatedRepositoryContribution
}

union Gh_CreatedRepositoryOrRestrictedContribution = Gh_CreatedRepositoryContribution | Gh_RestrictedContribution

input Gh_CreateEnterpriseOrganizationInput {
  enterpriseId: ID!
  login: String!
  profileName: String!
  billingEmail: String!
  adminLogins: [String!]!
  clientMutationId: String
}

type Gh_CreateEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  organization: Gh_Organization
}

input Gh_CreateIssueInput {
  repositoryId: ID!
  title: String!
  body: String
  assigneeIds: [ID!]
  milestoneId: ID
  labelIds: [ID!]
  projectIds: [ID!]
  clientMutationId: String
}

type Gh_CreateIssuePayload {
  clientMutationId: String
  issue: Gh_Issue
}

input Gh_CreateProjectInput {
  ownerId: ID!
  name: String!
  body: String
  template: Gh_ProjectTemplate
  repositoryIds: [ID!]
  clientMutationId: String
}

type Gh_CreateProjectPayload {
  clientMutationId: String
  project: Gh_Project
}

input Gh_CreatePullRequestInput {
  repositoryId: ID!
  baseRefName: String!
  headRefName: String!
  title: String!
  body: String
  maintainerCanModify: Boolean = true
  clientMutationId: String
}

type Gh_CreatePullRequestPayload {
  clientMutationId: String
  pullRequest: Gh_PullRequest
}

input Gh_CreateRefInput {
  repositoryId: ID!
  name: String!
  oid: Gh_GitObjectID!
  clientMutationId: String
}

type Gh_CreateRefPayload {
  clientMutationId: String
  ref: Gh_Ref
}

input Gh_CreateRepositoryInput {
  name: String!
  ownerId: ID
  description: String
  visibility: Gh_RepositoryVisibility!
  template: Boolean = false
  homepageUrl: Gh_URI
  hasWikiEnabled: Boolean = false
  hasIssuesEnabled: Boolean = true
  teamId: ID
  clientMutationId: String
}

type Gh_CreateRepositoryPayload {
  clientMutationId: String
  repository: Gh_Repository
}

input Gh_CreateTeamDiscussionCommentInput {
  discussionId: ID!
  body: String!
  clientMutationId: String
}

type Gh_CreateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: Gh_TeamDiscussionComment
}

input Gh_CreateTeamDiscussionInput {
  teamId: ID!
  title: String!
  body: String!
  private: Boolean
  clientMutationId: String
}

type Gh_CreateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: Gh_TeamDiscussion
}

type Gh_CrossReferencedEvent implements Gh_Node & Gh_UniformResourceLocatable {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  isCrossRepository: Boolean!
  referencedAt: Gh_DateTime!
  resourcePath: Gh_URI!
  source: Gh_ReferencedSubject!
  target: Gh_ReferencedSubject!
  url: Gh_URI!
  willCloseTarget: Boolean!
}

scalar Gh_Date

scalar Gh_DateTime

input Gh_DeclineTopicSuggestionInput {
  repositoryId: ID!
  name: String!
  reason: Gh_TopicSuggestionDeclineReason!
  clientMutationId: String
}

type Gh_DeclineTopicSuggestionPayload {
  clientMutationId: String
  topic: Gh_Topic
}

enum Gh_DefaultRepositoryPermissionField {
  NONE
  READ
  WRITE
  ADMIN
}

interface Gh_Deletable {
  viewerCanDelete: Boolean!
}

input Gh_DeleteBranchProtectionRuleInput {
  branchProtectionRuleId: ID!
  clientMutationId: String
}

type Gh_DeleteBranchProtectionRulePayload {
  clientMutationId: String
}

input Gh_DeleteDeploymentInput {
  id: ID!
  clientMutationId: String
}

type Gh_DeleteDeploymentPayload {
  clientMutationId: String
}

input Gh_DeleteIssueCommentInput {
  id: ID!
  clientMutationId: String
}

type Gh_DeleteIssueCommentPayload {
  clientMutationId: String
}

input Gh_DeleteIssueInput {
  issueId: ID!
  clientMutationId: String
}

type Gh_DeleteIssuePayload {
  clientMutationId: String
  repository: Gh_Repository
}

input Gh_DeleteProjectCardInput {
  cardId: ID!
  clientMutationId: String
}

type Gh_DeleteProjectCardPayload {
  clientMutationId: String
  column: Gh_ProjectColumn
  deletedCardId: ID
}

input Gh_DeleteProjectColumnInput {
  columnId: ID!
  clientMutationId: String
}

type Gh_DeleteProjectColumnPayload {
  clientMutationId: String
  deletedColumnId: ID
  project: Gh_Project
}

input Gh_DeleteProjectInput {
  projectId: ID!
  clientMutationId: String
}

type Gh_DeleteProjectPayload {
  clientMutationId: String
  owner: Gh_ProjectOwner
}

input Gh_DeletePullRequestReviewCommentInput {
  id: ID!
  clientMutationId: String
}

type Gh_DeletePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
}

input Gh_DeletePullRequestReviewInput {
  pullRequestReviewId: ID!
  clientMutationId: String
}

type Gh_DeletePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
}

input Gh_DeleteRefInput {
  refId: ID!
  clientMutationId: String
}

type Gh_DeleteRefPayload {
  clientMutationId: String
}

input Gh_DeleteTeamDiscussionCommentInput {
  id: ID!
  clientMutationId: String
}

type Gh_DeleteTeamDiscussionCommentPayload {
  clientMutationId: String
}

input Gh_DeleteTeamDiscussionInput {
  id: ID!
  clientMutationId: String
}

type Gh_DeleteTeamDiscussionPayload {
  clientMutationId: String
}

type Gh_DemilestonedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  milestoneTitle: String!
  subject: Gh_MilestoneItem!
}

type Gh_DeployedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  deployment: Gh_Deployment!
  id: ID!
  pullRequest: Gh_PullRequest!
  ref: Gh_Ref
}

type Gh_DeployKey implements Gh_Node {
  createdAt: Gh_DateTime!
  id: ID!
  key: String!
  readOnly: Boolean!
  title: String!
  verified: Boolean!
}

type Gh_DeployKeyConnection {
  edges: [Gh_DeployKeyEdge]
  nodes: [Gh_DeployKey]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_DeployKeyEdge {
  cursor: String!
  node: Gh_DeployKey
}

type Gh_Deployment implements Gh_Node {
  commit: Gh_Commit
  commitOid: String!
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  databaseId: Int
  description: String
  environment: String
  id: ID!
  latestEnvironment: String
  latestStatus: Gh_DeploymentStatus
  originalEnvironment: String
  payload: String
  ref: Gh_Ref
  repository: Gh_Repository!
  state: Gh_DeploymentState
  statuses(after: String, before: String, first: Int, last: Int): Gh_DeploymentStatusConnection
  task: String
  updatedAt: Gh_DateTime!
}

type Gh_DeploymentConnection {
  edges: [Gh_DeploymentEdge]
  nodes: [Gh_Deployment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_DeploymentEdge {
  cursor: String!
  node: Gh_Deployment
}

type Gh_DeploymentEnvironmentChangedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  deploymentStatus: Gh_DeploymentStatus!
  id: ID!
  pullRequest: Gh_PullRequest!
}

input Gh_DeploymentOrder {
  field: Gh_DeploymentOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_DeploymentOrderField {
  CREATED_AT
}

enum Gh_DeploymentState {
  ABANDONED
  ACTIVE
  DESTROYED
  ERROR
  FAILURE
  INACTIVE
  PENDING
  QUEUED
  IN_PROGRESS
}

type Gh_DeploymentStatus implements Gh_Node {
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  deployment: Gh_Deployment!
  description: String
  environmentUrl: Gh_URI
  id: ID!
  logUrl: Gh_URI
  state: Gh_DeploymentStatusState!
  updatedAt: Gh_DateTime!
}

type Gh_DeploymentStatusConnection {
  edges: [Gh_DeploymentStatusEdge]
  nodes: [Gh_DeploymentStatus]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_DeploymentStatusEdge {
  cursor: String!
  node: Gh_DeploymentStatus
}

enum Gh_DeploymentStatusState {
  PENDING
  SUCCESS
  FAILURE
  INACTIVE
  ERROR
  QUEUED
  IN_PROGRESS
}

type Gh_DisconnectedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  isCrossRepository: Boolean!
  source: Gh_ReferencedSubject!
  subject: Gh_ReferencedSubject!
}

input Gh_DismissPullRequestReviewInput {
  pullRequestReviewId: ID!
  message: String!
  clientMutationId: String
}

type Gh_DismissPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
}

input Gh_DraftPullRequestReviewComment {
  path: String!
  position: Int!
  body: String!
}

type Gh_Enterprise implements Gh_Node {
  avatarUrl(size: Int): Gh_URI!
  billingInfo: Gh_EnterpriseBillingInfo
  createdAt: Gh_DateTime!
  databaseId: Int
  description: String
  descriptionHTML: Gh_HTML!
  id: ID!
  location: String
  members(organizationLogins: [String!], query: String, orderBy: Gh_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}, role: Gh_EnterpriseUserAccountMembershipRole, deployment: Gh_EnterpriseUserDeployment, after: String, before: String, first: Int, last: Int): Gh_EnterpriseMemberConnection!
  name: String!
  organizations(query: String, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_OrganizationConnection!
  ownerInfo: Gh_EnterpriseOwnerInfo
  resourcePath: Gh_URI!
  url: Gh_URI!
  userAccounts(after: String, before: String, first: Int, last: Int): Gh_EnterpriseUserAccountConnection!
  viewerIsAdmin: Boolean!
  websiteUrl: Gh_URI
}

type Gh_EnterpriseAdministratorConnection {
  edges: [Gh_EnterpriseAdministratorEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseAdministratorEdge {
  cursor: String!
  node: Gh_User
  role: Gh_EnterpriseAdministratorRole!
}

type Gh_EnterpriseAdministratorInvitation implements Gh_Node {
  createdAt: Gh_DateTime!
  email: String
  enterprise: Gh_Enterprise!
  id: ID!
  invitee: Gh_User
  inviter: Gh_User
  role: Gh_EnterpriseAdministratorRole!
}

type Gh_EnterpriseAdministratorInvitationConnection {
  edges: [Gh_EnterpriseAdministratorInvitationEdge]
  nodes: [Gh_EnterpriseAdministratorInvitation]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseAdministratorInvitationEdge {
  cursor: String!
  node: Gh_EnterpriseAdministratorInvitation
}

input Gh_EnterpriseAdministratorInvitationOrder {
  field: Gh_EnterpriseAdministratorInvitationOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseAdministratorInvitationOrderField {
  CREATED_AT
}

enum Gh_EnterpriseAdministratorRole {
  OWNER
  BILLING_MANAGER
}

interface Gh_EnterpriseAuditEntryData {
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
}

type Gh_EnterpriseBillingInfo {
  allLicensableUsersCount: Int!
  assetPacks: Int!
  availableSeats: Int! @deprecated(reason: "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.")
  bandwidthQuota: Float!
  bandwidthUsage: Float!
  bandwidthUsagePercentage: Int!
  seats: Int! @deprecated(reason: "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.")
  storageQuota: Float!
  storageUsage: Float!
  storageUsagePercentage: Int!
  totalAvailableLicenses: Int!
  totalLicenses: Int!
}

enum Gh_EnterpriseDefaultRepositoryPermissionSettingValue {
  NO_POLICY
  ADMIN
  WRITE
  READ
  NONE
}

enum Gh_EnterpriseEnabledDisabledSettingValue {
  ENABLED
  DISABLED
  NO_POLICY
}

enum Gh_EnterpriseEnabledSettingValue {
  ENABLED
  NO_POLICY
}

type Gh_EnterpriseIdentityProvider implements Gh_Node {
  digestMethod: Gh_SamlDigestAlgorithm
  enterprise: Gh_Enterprise
  externalIdentities(after: String, before: String, first: Int, last: Int): Gh_ExternalIdentityConnection!
  id: ID!
  idpCertificate: Gh_X509Certificate
  issuer: String
  recoveryCodes: [String!]
  signatureMethod: Gh_SamlSignatureAlgorithm
  ssoUrl: Gh_URI
}

union Gh_EnterpriseMember = Gh_EnterpriseUserAccount | Gh_User

type Gh_EnterpriseMemberConnection {
  edges: [Gh_EnterpriseMemberEdge]
  nodes: [Gh_EnterpriseMember]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseMemberEdge {
  cursor: String!
  isUnlicensed: Boolean!
  node: Gh_EnterpriseMember
}

input Gh_EnterpriseMemberOrder {
  field: Gh_EnterpriseMemberOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseMemberOrderField {
  LOGIN
  CREATED_AT
}

enum Gh_EnterpriseMembersCanCreateRepositoriesSettingValue {
  NO_POLICY
  ALL
  PUBLIC
  PRIVATE
  DISABLED
}

enum Gh_EnterpriseMembersCanMakePurchasesSettingValue {
  ENABLED
  DISABLED
}

type Gh_EnterpriseOrganizationMembershipConnection {
  edges: [Gh_EnterpriseOrganizationMembershipEdge]
  nodes: [Gh_Organization]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseOrganizationMembershipEdge {
  cursor: String!
  node: Gh_Organization
  role: Gh_EnterpriseUserAccountMembershipRole!
}

type Gh_EnterpriseOutsideCollaboratorConnection {
  edges: [Gh_EnterpriseOutsideCollaboratorEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseOutsideCollaboratorEdge {
  cursor: String!
  isUnlicensed: Boolean!
  node: Gh_User
  repositories(after: String, before: String, first: Int, last: Int, orderBy: Gh_RepositoryOrder = {field: NAME, direction: ASC}): Gh_EnterpriseRepositoryInfoConnection!
}

type Gh_EnterpriseOwnerInfo {
  actionExecutionCapabilitySettingOrganizations(after: String, before: String, first: Int, last: Int, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  admins(query: String, role: Gh_EnterpriseAdministratorRole, orderBy: Gh_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_EnterpriseAdministratorConnection!
  affiliatedUsersWithTwoFactorDisabled(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!
  allowPrivateRepositoryForkingSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  allowPrivateRepositoryForkingSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  defaultRepositoryPermissionSetting: Gh_EnterpriseDefaultRepositoryPermissionSettingValue!
  defaultRepositoryPermissionSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Gh_DefaultRepositoryPermissionField!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  enterpriseServerInstallations(after: String, before: String, first: Int, last: Int, connectedOnly: Boolean = false, orderBy: Gh_EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}): Gh_EnterpriseServerInstallationConnection!
  isUpdatingDefaultRepositoryPermission: Boolean!
  isUpdatingTwoFactorRequirement: Boolean!
  membersCanChangeRepositoryVisibilitySetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanChangeRepositoryVisibilitySettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanCreateInternalRepositoriesSetting: Boolean
  membersCanCreatePrivateRepositoriesSetting: Boolean
  membersCanCreatePublicRepositoriesSetting: Boolean
  membersCanCreateRepositoriesSetting: Gh_EnterpriseMembersCanCreateRepositoriesSettingValue
  membersCanCreateRepositoriesSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Gh_OrganizationMembersCanCreateRepositoriesSettingValue!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanDeleteIssuesSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteIssuesSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanDeleteRepositoriesSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanDeleteRepositoriesSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanInviteCollaboratorsSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanInviteCollaboratorsSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanMakePurchasesSetting: Gh_EnterpriseMembersCanMakePurchasesSettingValue!
  membersCanUpdateProtectedBranchesSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanUpdateProtectedBranchesSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  membersCanViewDependencyInsightsSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  membersCanViewDependencyInsightsSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  organizationProjectsSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  organizationProjectsSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  outsideCollaborators(login: String, query: String, orderBy: Gh_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}, visibility: Gh_RepositoryVisibility, after: String, before: String, first: Int, last: Int): Gh_EnterpriseOutsideCollaboratorConnection!
  pendingAdminInvitations(query: String, orderBy: Gh_EnterpriseAdministratorInvitationOrder = {field: CREATED_AT, direction: DESC}, role: Gh_EnterpriseAdministratorRole, after: String, before: String, first: Int, last: Int): Gh_EnterpriseAdministratorInvitationConnection!
  pendingCollaborators(query: String, orderBy: Gh_RepositoryInvitationOrder = {field: INVITEE_LOGIN, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_EnterprisePendingCollaboratorConnection!
  pendingMemberInvitations(query: String, after: String, before: String, first: Int, last: Int): Gh_EnterprisePendingMemberInvitationConnection!
  repositoryProjectsSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  repositoryProjectsSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  samlIdentityProvider: Gh_EnterpriseIdentityProvider
  samlIdentityProviderSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Gh_IdentityProviderConfigurationState!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  teamDiscussionsSetting: Gh_EnterpriseEnabledDisabledSettingValue!
  teamDiscussionsSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
  twoFactorRequiredSetting: Gh_EnterpriseEnabledSettingValue!
  twoFactorRequiredSettingOrganizations(after: String, before: String, first: Int, last: Int, value: Boolean!, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}): Gh_OrganizationConnection!
}

type Gh_EnterprisePendingCollaboratorConnection {
  edges: [Gh_EnterprisePendingCollaboratorEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterprisePendingCollaboratorEdge {
  cursor: String!
  isUnlicensed: Boolean!
  node: Gh_User
  repositories(after: String, before: String, first: Int, last: Int, orderBy: Gh_RepositoryOrder = {field: NAME, direction: ASC}): Gh_EnterpriseRepositoryInfoConnection!
}

type Gh_EnterprisePendingMemberInvitationConnection {
  edges: [Gh_EnterprisePendingMemberInvitationEdge]
  nodes: [Gh_OrganizationInvitation]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  totalUniqueUserCount: Int!
}

type Gh_EnterprisePendingMemberInvitationEdge {
  cursor: String!
  isUnlicensed: Boolean!
  node: Gh_OrganizationInvitation
}

type Gh_EnterpriseRepositoryInfo implements Gh_Node {
  id: ID!
  isPrivate: Boolean!
  name: String!
  nameWithOwner: String!
}

type Gh_EnterpriseRepositoryInfoConnection {
  edges: [Gh_EnterpriseRepositoryInfoEdge]
  nodes: [Gh_EnterpriseRepositoryInfo]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseRepositoryInfoEdge {
  cursor: String!
  node: Gh_EnterpriseRepositoryInfo
}

type Gh_EnterpriseServerInstallation implements Gh_Node {
  createdAt: Gh_DateTime!
  customerName: String!
  hostName: String!
  id: ID!
  isConnected: Boolean!
  updatedAt: Gh_DateTime!
  userAccounts(orderBy: Gh_EnterpriseServerUserAccountOrder = {field: LOGIN, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_EnterpriseServerUserAccountConnection!
  userAccountsUploads(orderBy: Gh_EnterpriseServerUserAccountsUploadOrder = {field: CREATED_AT, direction: DESC}, after: String, before: String, first: Int, last: Int): Gh_EnterpriseServerUserAccountsUploadConnection!
}

type Gh_EnterpriseServerInstallationConnection {
  edges: [Gh_EnterpriseServerInstallationEdge]
  nodes: [Gh_EnterpriseServerInstallation]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseServerInstallationEdge {
  cursor: String!
  node: Gh_EnterpriseServerInstallation
}

input Gh_EnterpriseServerInstallationOrder {
  field: Gh_EnterpriseServerInstallationOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseServerInstallationOrderField {
  HOST_NAME
  CUSTOMER_NAME
  CREATED_AT
}

type Gh_EnterpriseServerUserAccount implements Gh_Node {
  createdAt: Gh_DateTime!
  emails(orderBy: Gh_EnterpriseServerUserAccountEmailOrder = {field: EMAIL, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_EnterpriseServerUserAccountEmailConnection!
  enterpriseServerInstallation: Gh_EnterpriseServerInstallation!
  id: ID!
  isSiteAdmin: Boolean!
  login: String!
  profileName: String
  remoteCreatedAt: Gh_DateTime!
  remoteUserId: Int!
  updatedAt: Gh_DateTime!
}

type Gh_EnterpriseServerUserAccountConnection {
  edges: [Gh_EnterpriseServerUserAccountEdge]
  nodes: [Gh_EnterpriseServerUserAccount]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseServerUserAccountEdge {
  cursor: String!
  node: Gh_EnterpriseServerUserAccount
}

type Gh_EnterpriseServerUserAccountEmail implements Gh_Node {
  createdAt: Gh_DateTime!
  email: String!
  id: ID!
  isPrimary: Boolean!
  updatedAt: Gh_DateTime!
  userAccount: Gh_EnterpriseServerUserAccount!
}

type Gh_EnterpriseServerUserAccountEmailConnection {
  edges: [Gh_EnterpriseServerUserAccountEmailEdge]
  nodes: [Gh_EnterpriseServerUserAccountEmail]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseServerUserAccountEmailEdge {
  cursor: String!
  node: Gh_EnterpriseServerUserAccountEmail
}

input Gh_EnterpriseServerUserAccountEmailOrder {
  field: Gh_EnterpriseServerUserAccountEmailOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseServerUserAccountEmailOrderField {
  EMAIL
}

input Gh_EnterpriseServerUserAccountOrder {
  field: Gh_EnterpriseServerUserAccountOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseServerUserAccountOrderField {
  LOGIN
  REMOTE_CREATED_AT
}

type Gh_EnterpriseServerUserAccountsUpload implements Gh_Node {
  createdAt: Gh_DateTime!
  enterprise: Gh_Enterprise!
  enterpriseServerInstallation: Gh_EnterpriseServerInstallation!
  id: ID!
  name: String!
  syncState: Gh_EnterpriseServerUserAccountsUploadSyncState!
  updatedAt: Gh_DateTime!
}

type Gh_EnterpriseServerUserAccountsUploadConnection {
  edges: [Gh_EnterpriseServerUserAccountsUploadEdge]
  nodes: [Gh_EnterpriseServerUserAccountsUpload]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseServerUserAccountsUploadEdge {
  cursor: String!
  node: Gh_EnterpriseServerUserAccountsUpload
}

input Gh_EnterpriseServerUserAccountsUploadOrder {
  field: Gh_EnterpriseServerUserAccountsUploadOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_EnterpriseServerUserAccountsUploadOrderField {
  CREATED_AT
}

enum Gh_EnterpriseServerUserAccountsUploadSyncState {
  PENDING
  SUCCESS
  FAILURE
}

type Gh_EnterpriseUserAccount implements Gh_Node & Gh_Actor {
  avatarUrl(size: Int): Gh_URI!
  createdAt: Gh_DateTime!
  enterprise: Gh_Enterprise!
  id: ID!
  login: String!
  name: String
  organizations(query: String, orderBy: Gh_OrganizationOrder = {field: LOGIN, direction: ASC}, role: Gh_EnterpriseUserAccountMembershipRole, after: String, before: String, first: Int, last: Int): Gh_EnterpriseOrganizationMembershipConnection!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  user: Gh_User
}

type Gh_EnterpriseUserAccountConnection {
  edges: [Gh_EnterpriseUserAccountEdge]
  nodes: [Gh_EnterpriseUserAccount]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_EnterpriseUserAccountEdge {
  cursor: String!
  node: Gh_EnterpriseUserAccount
}

enum Gh_EnterpriseUserAccountMembershipRole {
  MEMBER
  OWNER
}

enum Gh_EnterpriseUserDeployment {
  CLOUD
  SERVER
}

type Gh_ExternalIdentity implements Gh_Node {
  guid: String!
  id: ID!
  organizationInvitation: Gh_OrganizationInvitation
  samlIdentity: Gh_ExternalIdentitySamlAttributes
  scimIdentity: Gh_ExternalIdentityScimAttributes
  user: Gh_User
}

type Gh_ExternalIdentityConnection {
  edges: [Gh_ExternalIdentityEdge]
  nodes: [Gh_ExternalIdentity]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ExternalIdentityEdge {
  cursor: String!
  node: Gh_ExternalIdentity
}

type Gh_ExternalIdentitySamlAttributes {
  nameId: String
}

type Gh_ExternalIdentityScimAttributes {
  username: String
}

type Gh_FollowerConnection {
  edges: [Gh_UserEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_FollowingConnection {
  edges: [Gh_UserEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

input Gh_FollowUserInput {
  userId: ID!
  clientMutationId: String
}

type Gh_FollowUserPayload {
  clientMutationId: String
  user: Gh_User
}

type Gh_FundingLink {
  platform: Gh_FundingPlatform!
  url: Gh_URI!
}

enum Gh_FundingPlatform {
  GITHUB
  PATREON
  OPEN_COLLECTIVE
  KO_FI
  TIDELIFT
  COMMUNITY_BRIDGE
  LIBERAPAY
  ISSUEHUNT
  OTECHIE
  CUSTOM
}

type Gh_Gist implements Gh_Node & Gh_Starrable & Gh_UniformResourceLocatable {
  comments(after: String, before: String, first: Int, last: Int): Gh_GistCommentConnection!
  createdAt: Gh_DateTime!
  description: String
  files(limit: Int = 10, oid: Gh_GitObjectID): [Gh_GistFile]
  forks(after: String, before: String, first: Int, last: Int, orderBy: Gh_GistOrder): Gh_GistConnection!
  id: ID!
  isFork: Boolean!
  isPublic: Boolean!
  name: String!
  owner: Gh_RepositoryOwner
  pushedAt: Gh_DateTime
  resourcePath: Gh_URI!
  stargazers(after: String, before: String, first: Int, last: Int, orderBy: Gh_StarOrder): Gh_StargazerConnection!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  viewerHasStarred: Boolean!
}

type Gh_GistComment implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Updatable & Gh_UpdatableComment {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  gist: Gh_Gist!
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: Gh_DateTime
  minimizedReason: String
  publishedAt: Gh_DateTime
  updatedAt: Gh_DateTime!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_GistCommentConnection {
  edges: [Gh_GistCommentEdge]
  nodes: [Gh_GistComment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_GistCommentEdge {
  cursor: String!
  node: Gh_GistComment
}

type Gh_GistConnection {
  edges: [Gh_GistEdge]
  nodes: [Gh_Gist]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_GistEdge {
  cursor: String!
  node: Gh_Gist
}

type Gh_GistFile {
  encodedName: String
  encoding: String
  extension: String
  isImage: Boolean!
  isTruncated: Boolean!
  language: Gh_Language
  name: String
  size: Int
  text(truncate: Int): String
}

input Gh_GistOrder {
  field: Gh_GistOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_GistOrderField {
  CREATED_AT
  UPDATED_AT
  PUSHED_AT
}

enum Gh_GistPrivacy {
  PUBLIC
  SECRET
  ALL
}

type Gh_GitActor {
  avatarUrl(size: Int): Gh_URI!
  date: Gh_GitTimestamp
  email: String
  name: String
  user: Gh_User
}

type Gh_GitHubMetadata {
  gitHubServicesSha: Gh_GitObjectID!
  gitIpAddresses: [String!]
  hookIpAddresses: [String!]
  importerIpAddresses: [String!]
  isPasswordAuthenticationVerifiable: Boolean!
  pagesIpAddresses: [String!]
}

interface Gh_GitObject {
  abbreviatedOid: String!
  commitResourcePath: Gh_URI!
  commitUrl: Gh_URI!
  id: ID!
  oid: Gh_GitObjectID!
  repository: Gh_Repository!
}

scalar Gh_GitObjectID

interface Gh_GitSignature {
  email: String!
  isValid: Boolean!
  payload: String!
  signature: String!
  signer: Gh_User
  state: Gh_GitSignatureState!
  wasSignedByGitHub: Boolean!
}

enum Gh_GitSignatureState {
  VALID
  INVALID
  MALFORMED_SIG
  UNKNOWN_KEY
  BAD_EMAIL
  UNVERIFIED_EMAIL
  NO_USER
  UNKNOWN_SIG_TYPE
  UNSIGNED
  GPGVERIFY_UNAVAILABLE
  GPGVERIFY_ERROR
  NOT_SIGNING_KEY
  EXPIRED_KEY
  OCSP_PENDING
  OCSP_ERROR
  BAD_CERT
  OCSP_REVOKED
}

scalar Gh_GitSSHRemote

scalar Gh_GitTimestamp

type Gh_HeadRefDeletedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  headRef: Gh_Ref
  headRefName: String!
  id: ID!
  pullRequest: Gh_PullRequest!
}

type Gh_HeadRefForcePushedEvent implements Gh_Node {
  actor: Gh_Actor
  afterCommit: Gh_Commit
  beforeCommit: Gh_Commit
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
  ref: Gh_Ref
}

type Gh_HeadRefRestoredEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
}

type Gh_Hovercard {
  contexts: [Gh_HovercardContext!]!
}

interface Gh_HovercardContext {
  message: String!
  octicon: String!
}

scalar Gh_HTML

enum Gh_IdentityProviderConfigurationState {
  ENFORCED
  CONFIGURED
  UNCONFIGURED
}

input Gh_InviteEnterpriseAdminInput {
  enterpriseId: ID!
  invitee: String
  email: String
  role: Gh_EnterpriseAdministratorRole
  clientMutationId: String
}

type Gh_InviteEnterpriseAdminPayload {
  clientMutationId: String
  invitation: Gh_EnterpriseAdministratorInvitation
}

type Gh_Issue implements Gh_Node & Gh_Assignable & Gh_Closable & Gh_Comment & Gh_Updatable & Gh_UpdatableComment & Gh_Labelable & Gh_Lockable & Gh_Reactable & Gh_RepositoryNode & Gh_Subscribable & Gh_UniformResourceLocatable {
  activeLockReason: Gh_LockReason
  assignees(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  closed: Boolean!
  closedAt: Gh_DateTime
  comments(after: String, before: String, first: Int, last: Int): Gh_IssueCommentConnection!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  hovercard(includeNotificationContexts: Boolean = true): Gh_Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  labels(orderBy: Gh_LabelOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_LabelConnection
  lastEditedAt: Gh_DateTime
  locked: Boolean!
  milestone: Gh_Milestone
  number: Int!
  participants(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  projectCards(after: String, before: String, first: Int, last: Int, archivedStates: [Gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]): Gh_ProjectCardConnection!
  publishedAt: Gh_DateTime
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  state: Gh_IssueState!
  timeline(since: Gh_DateTime, after: String, before: String, first: Int, last: Int): Gh_IssueTimelineConnection! @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2019-10-01 UTC.")
  timelineItems(since: Gh_DateTime, skip: Int, itemTypes: [Gh_IssueTimelineItemsItemType!], after: String, before: String, first: Int, last: Int): Gh_IssueTimelineItemsConnection!
  title: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanReact: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: Gh_SubscriptionState
}

type Gh_IssueComment implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Updatable & Gh_UpdatableComment & Gh_Reactable & Gh_RepositoryNode {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  issue: Gh_Issue!
  lastEditedAt: Gh_DateTime
  minimizedReason: String
  publishedAt: Gh_DateTime
  pullRequest: Gh_PullRequest
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_IssueCommentConnection {
  edges: [Gh_IssueCommentEdge]
  nodes: [Gh_IssueComment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_IssueCommentEdge {
  cursor: String!
  node: Gh_IssueComment
}

type Gh_IssueConnection {
  edges: [Gh_IssueEdge]
  nodes: [Gh_Issue]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_IssueContributionsByRepository {
  contributions(after: String, before: String, first: Int, last: Int, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedIssueContributionConnection!
  repository: Gh_Repository!
}

type Gh_IssueEdge {
  cursor: String!
  node: Gh_Issue
}

input Gh_IssueFilters {
  assignee: String
  createdBy: String
  labels: [String!]
  mentioned: String
  milestone: String
  since: Gh_DateTime
  states: [Gh_IssueState!]
  viewerSubscribed: Boolean = false
}

input Gh_IssueOrder {
  field: Gh_IssueOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_IssueOrderField {
  CREATED_AT
  UPDATED_AT
  COMMENTS
}

union Gh_IssueOrPullRequest = Gh_Issue | Gh_PullRequest

enum Gh_IssueState {
  OPEN
  CLOSED
}

type Gh_IssueTimelineConnection {
  edges: [Gh_IssueTimelineItemEdge]
  nodes: [Gh_IssueTimelineItem]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

union Gh_IssueTimelineItem = Gh_AssignedEvent | Gh_ClosedEvent | Gh_Commit | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MilestonedEvent | Gh_ReferencedEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent

type Gh_IssueTimelineItemEdge {
  cursor: String!
  node: Gh_IssueTimelineItem
}

union Gh_IssueTimelineItems = Gh_AddedToProjectEvent | Gh_AssignedEvent | Gh_ClosedEvent | Gh_CommentDeletedEvent | Gh_ConnectedEvent | Gh_ConvertedNoteToIssueEvent | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DisconnectedEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MarkedAsDuplicateEvent | Gh_MentionedEvent | Gh_MilestonedEvent | Gh_MovedColumnsInProjectEvent | Gh_PinnedEvent | Gh_ReferencedEvent | Gh_RemovedFromProjectEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnmarkedAsDuplicateEvent | Gh_UnpinnedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent

type Gh_IssueTimelineItemsConnection {
  edges: [Gh_IssueTimelineItemsEdge]
  filteredCount: Int!
  nodes: [Gh_IssueTimelineItems]
  pageCount: Int!
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  updatedAt: Gh_DateTime!
}

type Gh_IssueTimelineItemsEdge {
  cursor: String!
  node: Gh_IssueTimelineItems
}

enum Gh_IssueTimelineItemsItemType {
  ISSUE_COMMENT
  CROSS_REFERENCED_EVENT
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  DEMILESTONED_EVENT
  DISCONNECTED_EVENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  USER_BLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
}

type Gh_JoinedGitHubContribution implements Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_Label implements Gh_Node {
  color: String!
  createdAt: Gh_DateTime
  description: String
  id: ID!
  isDefault: Boolean!
  issues(orderBy: Gh_IssueOrder, labels: [String!], states: [Gh_IssueState!], filterBy: Gh_IssueFilters, after: String, before: String, first: Int, last: Int): Gh_IssueConnection!
  name: String!
  pullRequests(states: [Gh_PullRequestState!], labels: [String!], headRefName: String, baseRefName: String, orderBy: Gh_IssueOrder, after: String, before: String, first: Int, last: Int): Gh_PullRequestConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime
  url: Gh_URI!
}

interface Gh_Labelable {
  labels(orderBy: Gh_LabelOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_LabelConnection
}

type Gh_LabelConnection {
  edges: [Gh_LabelEdge]
  nodes: [Gh_Label]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_LabeledEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  label: Gh_Label!
  labelable: Gh_Labelable!
}

type Gh_LabelEdge {
  cursor: String!
  node: Gh_Label
}

input Gh_LabelOrder {
  field: Gh_LabelOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_LabelOrderField {
  NAME
  CREATED_AT
}

type Gh_Language implements Gh_Node {
  color: String
  id: ID!
  name: String!
}

type Gh_LanguageConnection {
  edges: [Gh_LanguageEdge]
  nodes: [Gh_Language]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  totalSize: Int!
}

type Gh_LanguageEdge {
  cursor: String!
  node: Gh_Language!
  size: Int!
}

input Gh_LanguageOrder {
  field: Gh_LanguageOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_LanguageOrderField {
  SIZE
}

type Gh_License implements Gh_Node {
  body: String!
  conditions: [Gh_LicenseRule]!
  description: String
  featured: Boolean!
  hidden: Boolean!
  id: ID!
  implementation: String
  key: String!
  limitations: [Gh_LicenseRule]!
  name: String!
  nickname: String
  permissions: [Gh_LicenseRule]!
  pseudoLicense: Boolean!
  spdxId: String
  url: Gh_URI
}

type Gh_LicenseRule {
  description: String!
  key: String!
  label: String!
}

input Gh_LinkRepositoryToProjectInput {
  projectId: ID!
  repositoryId: ID!
  clientMutationId: String
}

type Gh_LinkRepositoryToProjectPayload {
  clientMutationId: String
  project: Gh_Project
  repository: Gh_Repository
}

interface Gh_Lockable {
  activeLockReason: Gh_LockReason
  locked: Boolean!
}

type Gh_LockedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  lockReason: Gh_LockReason
  lockable: Gh_Lockable!
}

input Gh_LockLockableInput {
  lockableId: ID!
  lockReason: Gh_LockReason
  clientMutationId: String
}

type Gh_LockLockablePayload {
  actor: Gh_Actor
  clientMutationId: String
  lockedRecord: Gh_Lockable
}

enum Gh_LockReason {
  OFF_TOPIC
  TOO_HEATED
  RESOLVED
  SPAM
}

type Gh_Mannequin implements Gh_Node & Gh_Actor & Gh_UniformResourceLocatable {
  avatarUrl(size: Int): Gh_URI!
  createdAt: Gh_DateTime!
  databaseId: Int
  email: String
  id: ID!
  login: String!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

type Gh_MarkedAsDuplicateEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
}

type Gh_MarketplaceCategory implements Gh_Node {
  description: String
  howItWorks: String
  id: ID!
  name: String!
  primaryListingCount: Int!
  resourcePath: Gh_URI!
  secondaryListingCount: Int!
  slug: String!
  url: Gh_URI!
}

type Gh_MarketplaceListing implements Gh_Node {
  app: Gh_App
  companyUrl: Gh_URI
  configurationResourcePath: Gh_URI!
  configurationUrl: Gh_URI!
  documentationUrl: Gh_URI
  extendedDescription: String
  extendedDescriptionHTML: Gh_HTML!
  fullDescription: String!
  fullDescriptionHTML: Gh_HTML!
  hasApprovalBeenRequested: Boolean! @deprecated(reason: "`hasApprovalBeenRequested` will be removed. Use `isVerificationPendingFromDraft` instead. Removal on 2019-10-01 UTC.")
  hasPublishedFreeTrialPlans: Boolean!
  hasTermsOfService: Boolean!
  howItWorks: String
  howItWorksHTML: Gh_HTML!
  id: ID!
  installationUrl: Gh_URI
  installedForViewer: Boolean!
  isApproved: Boolean! @deprecated(reason: "`isApproved` will be removed. Use `isPublic` instead. Removal on 2019-10-01 UTC.")
  isArchived: Boolean!
  isDelisted: Boolean! @deprecated(reason: "`isDelisted` will be removed. Use `isArchived` instead. Removal on 2019-10-01 UTC.")
  isDraft: Boolean!
  isPaid: Boolean!
  isPublic: Boolean!
  isRejected: Boolean!
  isUnverified: Boolean!
  isUnverifiedPending: Boolean!
  isVerificationPendingFromDraft: Boolean!
  isVerificationPendingFromUnverified: Boolean!
  isVerified: Boolean!
  logoBackgroundColor: String!
  logoUrl(size: Int = 400): Gh_URI
  name: String!
  normalizedShortDescription: String!
  pricingUrl: Gh_URI
  primaryCategory: Gh_MarketplaceCategory!
  privacyPolicyUrl: Gh_URI!
  resourcePath: Gh_URI!
  screenshotUrls: [String]!
  secondaryCategory: Gh_MarketplaceCategory
  shortDescription: String!
  slug: String!
  statusUrl: Gh_URI
  supportEmail: String
  supportUrl: Gh_URI!
  termsOfServiceUrl: Gh_URI
  url: Gh_URI!
  viewerCanAddPlans: Boolean!
  viewerCanApprove: Boolean!
  viewerCanDelist: Boolean!
  viewerCanEdit: Boolean!
  viewerCanEditCategories: Boolean!
  viewerCanEditPlans: Boolean!
  viewerCanRedraft: Boolean!
  viewerCanReject: Boolean!
  viewerCanRequestApproval: Boolean!
  viewerHasPurchased: Boolean!
  viewerHasPurchasedForAllOrganizations: Boolean!
  viewerIsListingAdmin: Boolean!
}

type Gh_MarketplaceListingConnection {
  edges: [Gh_MarketplaceListingEdge]
  nodes: [Gh_MarketplaceListing]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_MarketplaceListingEdge {
  cursor: String!
  node: Gh_MarketplaceListing
}

type Gh_MembersCanDeleteReposClearAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_MembersCanDeleteReposDisableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_MembersCanDeleteReposEnableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

interface Gh_MemberStatusable {
  memberStatuses(after: String, before: String, first: Int, last: Int, orderBy: Gh_UserStatusOrder = {field: UPDATED_AT, direction: DESC}): Gh_UserStatusConnection!
}

type Gh_MentionedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

enum Gh_MergeableState {
  MERGEABLE
  CONFLICTING
  UNKNOWN
}

input Gh_MergeBranchInput {
  repositoryId: ID!
  base: String!
  head: String!
  commitMessage: String
  clientMutationId: String
}

type Gh_MergeBranchPayload {
  clientMutationId: String
  mergeCommit: Gh_Commit
}

type Gh_MergedEvent implements Gh_Node & Gh_UniformResourceLocatable {
  actor: Gh_Actor
  commit: Gh_Commit
  createdAt: Gh_DateTime!
  id: ID!
  mergeRef: Gh_Ref
  mergeRefName: String!
  pullRequest: Gh_PullRequest!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

input Gh_MergePullRequestInput {
  pullRequestId: ID!
  commitHeadline: String
  commitBody: String
  expectedHeadOid: Gh_GitObjectID
  mergeMethod: Gh_PullRequestMergeMethod = MERGE
  clientMutationId: String
}

type Gh_MergePullRequestPayload {
  actor: Gh_Actor
  clientMutationId: String
  pullRequest: Gh_PullRequest
}

type Gh_Milestone implements Gh_Node & Gh_Closable & Gh_UniformResourceLocatable {
  closed: Boolean!
  closedAt: Gh_DateTime
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  description: String
  dueOn: Gh_DateTime
  id: ID!
  issuePrioritiesDebug: String!
  issues(orderBy: Gh_IssueOrder, labels: [String!], states: [Gh_IssueState!], filterBy: Gh_IssueFilters, after: String, before: String, first: Int, last: Int): Gh_IssueConnection!
  number: Int!
  pullRequests(states: [Gh_PullRequestState!], labels: [String!], headRefName: String, baseRefName: String, orderBy: Gh_IssueOrder, after: String, before: String, first: Int, last: Int): Gh_PullRequestConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  state: Gh_MilestoneState!
  title: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

type Gh_MilestoneConnection {
  edges: [Gh_MilestoneEdge]
  nodes: [Gh_Milestone]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_MilestonedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  milestoneTitle: String!
  subject: Gh_MilestoneItem!
}

type Gh_MilestoneEdge {
  cursor: String!
  node: Gh_Milestone
}

union Gh_MilestoneItem = Gh_Issue | Gh_PullRequest

input Gh_MilestoneOrder {
  field: Gh_MilestoneOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_MilestoneOrderField {
  DUE_DATE
  CREATED_AT
  UPDATED_AT
  NUMBER
}

enum Gh_MilestoneState {
  OPEN
  CLOSED
}

type Gh_MovedColumnsInProjectEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

input Gh_MoveProjectCardInput {
  cardId: ID!
  columnId: ID!
  afterCardId: ID
  clientMutationId: String
}

type Gh_MoveProjectCardPayload {
  cardEdge: Gh_ProjectCardEdge
  clientMutationId: String
}

input Gh_MoveProjectColumnInput {
  columnId: ID!
  afterColumnId: ID
  clientMutationId: String
}

type Gh_MoveProjectColumnPayload {
  clientMutationId: String
  columnEdge: Gh_ProjectColumnEdge
}

interface Gh_Node {
  id: ID!
}

interface Gh_OauthApplicationAuditEntryData {
  oauthApplicationName: String
  oauthApplicationResourcePath: Gh_URI
  oauthApplicationUrl: Gh_URI
}

type Gh_OauthApplicationCreateAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  applicationUrl: Gh_URI
  callbackUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: Gh_URI
  oauthApplicationUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  rateLimit: Int
  state: Gh_OauthApplicationCreateAuditEntryState
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OauthApplicationCreateAuditEntryState {
  ACTIVE
  SUSPENDED
  PENDING_DELETION
}

enum Gh_OperationType {
  ACCESS
  AUTHENTICATION
  CREATE
  MODIFY
  REMOVE
  RESTORE
  TRANSFER
}

enum Gh_OrderDirection {
  ASC
  DESC
}

type Gh_OrgAddBillingManagerAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  invitationEmail: String
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgAddMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  permission: Gh_OrgAddMemberAuditEntryPermission
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgAddMemberAuditEntryPermission {
  READ
  ADMIN
}

type Gh_Organization implements Gh_Node & Gh_Actor & Gh_RegistryPackageOwner & Gh_RegistryPackageSearch & Gh_ProjectOwner & Gh_RepositoryOwner & Gh_UniformResourceLocatable & Gh_MemberStatusable & Gh_ProfileOwner & Gh_Sponsorable {
  anyPinnableItems(type: Gh_PinnableItemType): Boolean!
  auditLog(after: String, before: String, first: Int, last: Int, query: String, orderBy: Gh_AuditLogOrder = {field: CREATED_AT, direction: DESC}): Gh_OrganizationAuditEntryConnection!
  avatarUrl(size: Int): Gh_URI!
  createdAt: Gh_DateTime!
  databaseId: Int
  description: String
  descriptionHTML: String
  email: String
  id: ID!
  isVerified: Boolean!
  itemShowcase: Gh_ProfileItemShowcase!
  location: String
  login: String!
  memberStatuses(after: String, before: String, first: Int, last: Int, orderBy: Gh_UserStatusOrder = {field: UPDATED_AT, direction: DESC}): Gh_UserStatusConnection!
  membersWithRole(after: String, before: String, first: Int, last: Int): Gh_OrganizationMemberConnection!
  name: String
  newTeamResourcePath: Gh_URI!
  newTeamUrl: Gh_URI!
  organizationBillingEmail: String
  pendingMembers(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  pinnableItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItemsRemaining: Int!
  pinnedRepositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection! @deprecated(reason: "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-10-01 UTC.")
  project(number: Int!): Gh_Project
  projects(orderBy: Gh_ProjectOrder, search: String, states: [Gh_ProjectState!], after: String, before: String, first: Int, last: Int): Gh_ProjectConnection!
  projectsResourcePath: Gh_URI!
  projectsUrl: Gh_URI!
  registryPackages(after: String, before: String, first: Int, last: Int, name: String, names: [String], repositoryId: ID, packageType: Gh_RegistryPackageType, registryPackageType: String, publicOnly: Boolean = false): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.")
  registryPackagesForQuery(after: String, before: String, first: Int, last: Int, query: String, packageType: Gh_RegistryPackageType): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.")
  repositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int, isFork: Boolean): Gh_RepositoryConnection!
  repository(name: String!): Gh_Repository
  requiresTwoFactorAuthentication: Boolean
  resourcePath: Gh_URI!
  samlIdentityProvider: Gh_OrganizationIdentityProvider
  sponsorsListing: Gh_SponsorsListing
  sponsorshipsAsMaintainer(after: String, before: String, first: Int, last: Int, includePrivate: Boolean = false, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
  sponsorshipsAsSponsor(after: String, before: String, first: Int, last: Int, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
  team(slug: String!): Gh_Team
  teams(privacy: Gh_TeamPrivacy, role: Gh_TeamRole, query: String, userLogins: [String!], orderBy: Gh_TeamOrder, ldapMapped: Boolean, rootTeamsOnly: Boolean = false, after: String, before: String, first: Int, last: Int): Gh_TeamConnection!
  teamsResourcePath: Gh_URI!
  teamsUrl: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  viewerCanAdminister: Boolean!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanCreateRepositories: Boolean!
  viewerCanCreateTeams: Boolean!
  viewerIsAMember: Boolean!
  websiteUrl: Gh_URI
}

union Gh_OrganizationAuditEntry = Gh_MembersCanDeleteReposClearAuditEntry | Gh_MembersCanDeleteReposDisableAuditEntry | Gh_MembersCanDeleteReposEnableAuditEntry | Gh_OauthApplicationCreateAuditEntry | Gh_OrgAddBillingManagerAuditEntry | Gh_OrgAddMemberAuditEntry | Gh_OrgBlockUserAuditEntry | Gh_OrgConfigDisableCollaboratorsOnlyAuditEntry | Gh_OrgConfigEnableCollaboratorsOnlyAuditEntry | Gh_OrgCreateAuditEntry | Gh_OrgDisableOauthAppRestrictionsAuditEntry | Gh_OrgDisableSamlAuditEntry | Gh_OrgDisableTwoFactorRequirementAuditEntry | Gh_OrgEnableOauthAppRestrictionsAuditEntry | Gh_OrgEnableSamlAuditEntry | Gh_OrgEnableTwoFactorRequirementAuditEntry | Gh_OrgInviteMemberAuditEntry | Gh_OrgInviteToBusinessAuditEntry | Gh_OrgOauthAppAccessApprovedAuditEntry | Gh_OrgOauthAppAccessDeniedAuditEntry | Gh_OrgOauthAppAccessRequestedAuditEntry | Gh_OrgRemoveBillingManagerAuditEntry | Gh_OrgRemoveMemberAuditEntry | Gh_OrgRemoveOutsideCollaboratorAuditEntry | Gh_OrgRestoreMemberAuditEntry | Gh_OrgUnblockUserAuditEntry | Gh_OrgUpdateDefaultRepositoryPermissionAuditEntry | Gh_OrgUpdateMemberAuditEntry | Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry | Gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | Gh_PrivateRepositoryForkingDisableAuditEntry | Gh_PrivateRepositoryForkingEnableAuditEntry | Gh_RepoAccessAuditEntry | Gh_RepoAddMemberAuditEntry | Gh_RepoAddTopicAuditEntry | Gh_RepoArchivedAuditEntry | Gh_RepoChangeMergeSettingAuditEntry | Gh_RepoConfigDisableAnonymousGitAccessAuditEntry | Gh_RepoConfigDisableCollaboratorsOnlyAuditEntry | Gh_RepoConfigDisableContributorsOnlyAuditEntry | Gh_RepoConfigDisableSockpuppetDisallowedAuditEntry | Gh_RepoConfigEnableAnonymousGitAccessAuditEntry | Gh_RepoConfigEnableCollaboratorsOnlyAuditEntry | Gh_RepoConfigEnableContributorsOnlyAuditEntry | Gh_RepoConfigEnableSockpuppetDisallowedAuditEntry | Gh_RepoConfigLockAnonymousGitAccessAuditEntry | Gh_RepoConfigUnlockAnonymousGitAccessAuditEntry | Gh_RepoCreateAuditEntry | Gh_RepoDestroyAuditEntry | Gh_RepoRemoveMemberAuditEntry | Gh_RepoRemoveTopicAuditEntry | Gh_RepositoryVisibilityChangeDisableAuditEntry | Gh_RepositoryVisibilityChangeEnableAuditEntry | Gh_TeamAddMemberAuditEntry | Gh_TeamAddRepositoryAuditEntry | Gh_TeamChangeParentTeamAuditEntry | Gh_TeamRemoveMemberAuditEntry | Gh_TeamRemoveRepositoryAuditEntry

type Gh_OrganizationAuditEntryConnection {
  edges: [Gh_OrganizationAuditEntryEdge]
  nodes: [Gh_OrganizationAuditEntry]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

interface Gh_OrganizationAuditEntryData {
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
}

type Gh_OrganizationAuditEntryEdge {
  cursor: String!
  node: Gh_OrganizationAuditEntry
}

type Gh_OrganizationConnection {
  edges: [Gh_OrganizationEdge]
  nodes: [Gh_Organization]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_OrganizationEdge {
  cursor: String!
  node: Gh_Organization
}

type Gh_OrganizationIdentityProvider implements Gh_Node {
  digestMethod: Gh_URI
  externalIdentities(after: String, before: String, first: Int, last: Int): Gh_ExternalIdentityConnection!
  id: ID!
  idpCertificate: Gh_X509Certificate
  issuer: String
  organization: Gh_Organization
  signatureMethod: Gh_URI
  ssoUrl: Gh_URI
}

type Gh_OrganizationInvitation implements Gh_Node {
  createdAt: Gh_DateTime!
  email: String
  id: ID!
  invitationType: Gh_OrganizationInvitationType!
  invitee: Gh_User
  inviter: Gh_User!
  organization: Gh_Organization!
  role: Gh_OrganizationInvitationRole!
}

type Gh_OrganizationInvitationConnection {
  edges: [Gh_OrganizationInvitationEdge]
  nodes: [Gh_OrganizationInvitation]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_OrganizationInvitationEdge {
  cursor: String!
  node: Gh_OrganizationInvitation
}

enum Gh_OrganizationInvitationRole {
  DIRECT_MEMBER
  ADMIN
  BILLING_MANAGER
  REINSTATE
}

enum Gh_OrganizationInvitationType {
  USER
  EMAIL
}

type Gh_OrganizationMemberConnection {
  edges: [Gh_OrganizationMemberEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_OrganizationMemberEdge {
  cursor: String!
  hasTwoFactorEnabled: Boolean
  node: Gh_User
  role: Gh_OrganizationMemberRole
}

enum Gh_OrganizationMemberRole {
  MEMBER
  ADMIN
}

enum Gh_OrganizationMembersCanCreateRepositoriesSettingValue {
  ALL
  PRIVATE
  DISABLED
}

input Gh_OrganizationOrder {
  field: Gh_OrganizationOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_OrganizationOrderField {
  CREATED_AT
  LOGIN
}

type Gh_OrgBlockUserAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  blockedUser: Gh_User
  blockedUserName: String
  blockedUserResourcePath: Gh_URI
  blockedUserUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgConfigDisableCollaboratorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgConfigEnableCollaboratorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgCreateAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  billingPlan: Gh_OrgCreateAuditEntryBillingPlan
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgCreateAuditEntryBillingPlan {
  FREE
  BUSINESS
  BUSINESS_PLUS
  UNLIMITED
  TIERED_PER_SEAT
}

type Gh_OrgDisableOauthAppRestrictionsAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgDisableSamlAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  digestMethodUrl: Gh_URI
  id: ID!
  issuerUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  signatureMethodUrl: Gh_URI
  singleSignOnUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgDisableTwoFactorRequirementAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgEnableOauthAppRestrictionsAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgEnableSamlAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  digestMethodUrl: Gh_URI
  id: ID!
  issuerUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  signatureMethodUrl: Gh_URI
  singleSignOnUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgEnableTwoFactorRequirementAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgInviteMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  email: String
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationInvitation: Gh_OrganizationInvitation
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgInviteToBusinessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgOauthAppAccessApprovedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: Gh_URI
  oauthApplicationUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgOauthAppAccessDeniedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: Gh_URI
  oauthApplicationUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgOauthAppAccessRequestedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OauthApplicationAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  oauthApplicationName: String
  oauthApplicationResourcePath: Gh_URI
  oauthApplicationUrl: Gh_URI
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgRemoveBillingManagerAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  reason: Gh_OrgRemoveBillingManagerAuditEntryReason
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgRemoveBillingManagerAuditEntryReason {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

type Gh_OrgRemoveMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  membershipTypes: [Gh_OrgRemoveMemberAuditEntryMembershipType!]
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  reason: Gh_OrgRemoveMemberAuditEntryReason
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgRemoveMemberAuditEntryMembershipType {
  DIRECT_MEMBER
  ADMIN
  BILLING_MANAGER
  UNAFFILIATED
  OUTSIDE_COLLABORATOR
}

enum Gh_OrgRemoveMemberAuditEntryReason {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  SAML_EXTERNAL_IDENTITY_MISSING
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

type Gh_OrgRemoveOutsideCollaboratorAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  membershipTypes: [Gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  reason: Gh_OrgRemoveOutsideCollaboratorAuditEntryReason
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  OUTSIDE_COLLABORATOR
  UNAFFILIATED
  BILLING_MANAGER
}

enum Gh_OrgRemoveOutsideCollaboratorAuditEntryReason {
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
  SAML_EXTERNAL_IDENTITY_MISSING
}

type Gh_OrgRestoreMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  restoredCustomEmailRoutingsCount: Int
  restoredIssueAssignmentsCount: Int
  restoredMemberships: [Gh_OrgRestoreMemberAuditEntryMembership!]
  restoredMembershipsCount: Int
  restoredRepositoriesCount: Int
  restoredRepositoryStarsCount: Int
  restoredRepositoryWatchesCount: Int
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

union Gh_OrgRestoreMemberAuditEntryMembership = Gh_OrgRestoreMemberMembershipOrganizationAuditEntryData | Gh_OrgRestoreMemberMembershipRepositoryAuditEntryData | Gh_OrgRestoreMemberMembershipTeamAuditEntryData

type Gh_OrgRestoreMemberMembershipOrganizationAuditEntryData implements Gh_OrganizationAuditEntryData {
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
}

type Gh_OrgRestoreMemberMembershipRepositoryAuditEntryData implements Gh_RepositoryAuditEntryData {
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
}

type Gh_OrgRestoreMemberMembershipTeamAuditEntryData implements Gh_TeamAuditEntryData {
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
}

type Gh_OrgUnblockUserAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  blockedUser: Gh_User
  blockedUserName: String
  blockedUserResourcePath: Gh_URI
  blockedUserUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_OrgUpdateDefaultRepositoryPermissionAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  permission: Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  permissionWas: Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  READ
  WRITE
  ADMIN
  NONE
}

type Gh_OrgUpdateMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  permission: Gh_OrgUpdateMemberAuditEntryPermission
  permissionWas: Gh_OrgUpdateMemberAuditEntryPermission
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_OrgUpdateMemberAuditEntryPermission {
  READ
  ADMIN
}

type Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  canCreateRepositories: Boolean
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

enum Gh_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  ALL
  PUBLIC
}

type Gh_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  canInviteOutsideCollaboratorsToRepositories: Boolean
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

union Gh_PermissionGranter = Gh_Organization | Gh_Repository | Gh_Team

type Gh_PermissionSource {
  organization: Gh_Organization!
  permission: Gh_DefaultRepositoryPermissionField!
  source: Gh_PermissionGranter!
}

union Gh_PinnableItem = Gh_Gist | Gh_Repository

type Gh_PinnableItemConnection {
  edges: [Gh_PinnableItemEdge]
  nodes: [Gh_PinnableItem]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PinnableItemEdge {
  cursor: String!
  node: Gh_PinnableItem
}

enum Gh_PinnableItemType {
  REPOSITORY
  GIST
  ISSUE
  PROJECT
  PULL_REQUEST
  USER
  ORGANIZATION
  TEAM
}

type Gh_PinnedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  issue: Gh_Issue!
}

scalar Gh_PreciseDateTime

type Gh_PrivateRepositoryForkingDisableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_PrivateRepositoryForkingEnableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_ProfileItemShowcase {
  hasPinnedItems: Boolean!
  items(after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
}

interface Gh_ProfileOwner {
  anyPinnableItems(type: Gh_PinnableItemType): Boolean!
  email: String
  id: ID!
  itemShowcase: Gh_ProfileItemShowcase!
  location: String
  login: String!
  name: String
  pinnableItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItemsRemaining: Int!
  viewerCanChangePinnedItems: Boolean!
  websiteUrl: Gh_URI
}

type Gh_Project implements Gh_Node & Gh_Closable & Gh_Updatable {
  body: String
  bodyHTML: Gh_HTML!
  closed: Boolean!
  closedAt: Gh_DateTime
  columns(after: String, before: String, first: Int, last: Int): Gh_ProjectColumnConnection!
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  databaseId: Int
  id: ID!
  name: String!
  number: Int!
  owner: Gh_ProjectOwner!
  pendingCards(after: String, before: String, first: Int, last: Int, archivedStates: [Gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]): Gh_ProjectCardConnection!
  resourcePath: Gh_URI!
  state: Gh_ProjectState!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  viewerCanUpdate: Boolean!
}

type Gh_ProjectCard implements Gh_Node {
  column: Gh_ProjectColumn
  content: Gh_ProjectCardItem
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  databaseId: Int
  id: ID!
  isArchived: Boolean!
  note: String
  project: Gh_Project!
  resourcePath: Gh_URI!
  state: Gh_ProjectCardState
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

enum Gh_ProjectCardArchivedState {
  ARCHIVED
  NOT_ARCHIVED
}

type Gh_ProjectCardConnection {
  edges: [Gh_ProjectCardEdge]
  nodes: [Gh_ProjectCard]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ProjectCardEdge {
  cursor: String!
  node: Gh_ProjectCard
}

union Gh_ProjectCardItem = Gh_Issue | Gh_PullRequest

enum Gh_ProjectCardState {
  CONTENT_ONLY
  NOTE_ONLY
  REDACTED
}

type Gh_ProjectColumn implements Gh_Node {
  cards(after: String, before: String, first: Int, last: Int, archivedStates: [Gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]): Gh_ProjectCardConnection!
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
  name: String!
  project: Gh_Project!
  purpose: Gh_ProjectColumnPurpose
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

type Gh_ProjectColumnConnection {
  edges: [Gh_ProjectColumnEdge]
  nodes: [Gh_ProjectColumn]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ProjectColumnEdge {
  cursor: String!
  node: Gh_ProjectColumn
}

enum Gh_ProjectColumnPurpose {
  TODO
  IN_PROGRESS
  DONE
}

type Gh_ProjectConnection {
  edges: [Gh_ProjectEdge]
  nodes: [Gh_Project]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ProjectEdge {
  cursor: String!
  node: Gh_Project
}

input Gh_ProjectOrder {
  field: Gh_ProjectOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_ProjectOrderField {
  CREATED_AT
  UPDATED_AT
  NAME
}

interface Gh_ProjectOwner {
  id: ID!
  project(number: Int!): Gh_Project
  projects(orderBy: Gh_ProjectOrder, search: String, states: [Gh_ProjectState!], after: String, before: String, first: Int, last: Int): Gh_ProjectConnection!
  projectsResourcePath: Gh_URI!
  projectsUrl: Gh_URI!
  viewerCanCreateProjects: Boolean!
}

enum Gh_ProjectState {
  OPEN
  CLOSED
}

enum Gh_ProjectTemplate {
  BASIC_KANBAN
  AUTOMATED_KANBAN_V2
  AUTOMATED_REVIEWS_KANBAN
  BUG_TRIAGE
}

type Gh_PublicKey implements Gh_Node {
  accessedAt: Gh_DateTime
  createdAt: Gh_DateTime
  fingerprint: String!
  id: ID!
  isReadOnly: Boolean
  key: String!
  updatedAt: Gh_DateTime
}

type Gh_PublicKeyConnection {
  edges: [Gh_PublicKeyEdge]
  nodes: [Gh_PublicKey]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PublicKeyEdge {
  cursor: String!
  node: Gh_PublicKey
}

type Gh_PullRequest implements Gh_Node & Gh_Assignable & Gh_Closable & Gh_Comment & Gh_Updatable & Gh_UpdatableComment & Gh_Labelable & Gh_Lockable & Gh_Reactable & Gh_RepositoryNode & Gh_Subscribable & Gh_UniformResourceLocatable {
  activeLockReason: Gh_LockReason
  additions: Int!
  assignees(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  baseRef: Gh_Ref
  baseRefName: String!
  baseRefOid: Gh_GitObjectID!
  baseRepository: Gh_Repository
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  changedFiles: Int!
  checksResourcePath: Gh_URI!
  checksUrl: Gh_URI!
  closed: Boolean!
  closedAt: Gh_DateTime
  comments(after: String, before: String, first: Int, last: Int): Gh_IssueCommentConnection!
  commits(after: String, before: String, first: Int, last: Int): Gh_PullRequestCommitConnection!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  deletions: Int!
  editor: Gh_Actor
  files(after: String, before: String, first: Int, last: Int): Gh_PullRequestChangedFileConnection
  headRef: Gh_Ref
  headRefName: String!
  headRefOid: Gh_GitObjectID!
  headRepository: Gh_Repository
  headRepositoryOwner: Gh_RepositoryOwner
  hovercard(includeNotificationContexts: Boolean = true): Gh_Hovercard!
  id: ID!
  includesCreatedEdit: Boolean!
  isCrossRepository: Boolean!
  labels(orderBy: Gh_LabelOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_LabelConnection
  lastEditedAt: Gh_DateTime
  locked: Boolean!
  maintainerCanModify: Boolean!
  mergeCommit: Gh_Commit
  mergeable: Gh_MergeableState!
  merged: Boolean!
  mergedAt: Gh_DateTime
  mergedBy: Gh_Actor
  milestone: Gh_Milestone
  number: Int!
  participants(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  permalink: Gh_URI!
  potentialMergeCommit: Gh_Commit
  projectCards(after: String, before: String, first: Int, last: Int, archivedStates: [Gh_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]): Gh_ProjectCardConnection!
  publishedAt: Gh_DateTime
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  revertResourcePath: Gh_URI!
  revertUrl: Gh_URI!
  reviewRequests(after: String, before: String, first: Int, last: Int): Gh_ReviewRequestConnection
  reviewThreads(after: String, before: String, first: Int, last: Int): Gh_PullRequestReviewThreadConnection!
  reviews(after: String, before: String, first: Int, last: Int, states: [Gh_PullRequestReviewState!], author: String): Gh_PullRequestReviewConnection
  state: Gh_PullRequestState!
  suggestedReviewers: [Gh_SuggestedReviewer]!
  timeline(since: Gh_DateTime, after: String, before: String, first: Int, last: Int): Gh_PullRequestTimelineConnection! @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2019-10-01 UTC.")
  timelineItems(since: Gh_DateTime, skip: Int, itemTypes: [Gh_PullRequestTimelineItemsItemType!], after: String, before: String, first: Int, last: Int): Gh_PullRequestTimelineItemsConnection!
  title: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanApplySuggestion: Boolean!
  viewerCanReact: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: Gh_SubscriptionState
}

type Gh_PullRequestChangedFile {
  additions: Int!
  deletions: Int!
  path: String!
}

type Gh_PullRequestChangedFileConnection {
  edges: [Gh_PullRequestChangedFileEdge]
  nodes: [Gh_PullRequestChangedFile]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestChangedFileEdge {
  cursor: String!
  node: Gh_PullRequestChangedFile
}

type Gh_PullRequestCommit implements Gh_Node & Gh_UniformResourceLocatable {
  commit: Gh_Commit!
  id: ID!
  pullRequest: Gh_PullRequest!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

type Gh_PullRequestCommitCommentThread implements Gh_Node & Gh_RepositoryNode {
  comments(after: String, before: String, first: Int, last: Int): Gh_CommitCommentConnection!
  commit: Gh_Commit!
  id: ID!
  path: String
  position: Int
  pullRequest: Gh_PullRequest!
  repository: Gh_Repository!
}

type Gh_PullRequestCommitConnection {
  edges: [Gh_PullRequestCommitEdge]
  nodes: [Gh_PullRequestCommit]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestCommitEdge {
  cursor: String!
  node: Gh_PullRequestCommit
}

type Gh_PullRequestConnection {
  edges: [Gh_PullRequestEdge]
  nodes: [Gh_PullRequest]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestContributionsByRepository {
  contributions(after: String, before: String, first: Int, last: Int, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedPullRequestContributionConnection!
  repository: Gh_Repository!
}

type Gh_PullRequestEdge {
  cursor: String!
  node: Gh_PullRequest
}

enum Gh_PullRequestMergeMethod {
  MERGE
  SQUASH
  REBASE
}

input Gh_PullRequestOrder {
  field: Gh_PullRequestOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_PullRequestOrderField {
  CREATED_AT
  UPDATED_AT
}

type Gh_PullRequestReview implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Updatable & Gh_UpdatableComment & Gh_Reactable & Gh_RepositoryNode {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  comments(after: String, before: String, first: Int, last: Int): Gh_PullRequestReviewCommentConnection!
  commit: Gh_Commit
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: Gh_DateTime
  onBehalfOf(after: String, before: String, first: Int, last: Int): Gh_TeamConnection!
  publishedAt: Gh_DateTime
  pullRequest: Gh_PullRequest!
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  state: Gh_PullRequestReviewState!
  submittedAt: Gh_DateTime
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_PullRequestReviewComment implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Updatable & Gh_UpdatableComment & Gh_Reactable & Gh_RepositoryNode {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  commit: Gh_Commit
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  diffHunk: String!
  draftedAt: Gh_DateTime!
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isMinimized: Boolean!
  lastEditedAt: Gh_DateTime
  minimizedReason: String
  originalCommit: Gh_Commit
  originalPosition: Int!
  outdated: Boolean!
  path: String!
  position: Int
  publishedAt: Gh_DateTime
  pullRequest: Gh_PullRequest!
  pullRequestReview: Gh_PullRequestReview
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  replyTo: Gh_PullRequestReviewComment
  repository: Gh_Repository!
  resourcePath: Gh_URI!
  state: Gh_PullRequestReviewCommentState!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanMinimize: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_PullRequestReviewCommentConnection {
  edges: [Gh_PullRequestReviewCommentEdge]
  nodes: [Gh_PullRequestReviewComment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestReviewCommentEdge {
  cursor: String!
  node: Gh_PullRequestReviewComment
}

enum Gh_PullRequestReviewCommentState {
  PENDING
  SUBMITTED
}

type Gh_PullRequestReviewConnection {
  edges: [Gh_PullRequestReviewEdge]
  nodes: [Gh_PullRequestReview]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestReviewContributionsByRepository {
  contributions(after: String, before: String, first: Int, last: Int, orderBy: Gh_ContributionOrder = {field: OCCURRED_AT, direction: DESC}): Gh_CreatedPullRequestReviewContributionConnection!
  repository: Gh_Repository!
}

type Gh_PullRequestReviewEdge {
  cursor: String!
  node: Gh_PullRequestReview
}

enum Gh_PullRequestReviewEvent {
  COMMENT
  APPROVE
  REQUEST_CHANGES
  DISMISS
}

enum Gh_PullRequestReviewState {
  PENDING
  COMMENTED
  APPROVED
  CHANGES_REQUESTED
  DISMISSED
}

type Gh_PullRequestReviewThread implements Gh_Node {
  comments(after: String, before: String, first: Int, last: Int, skip: Int): Gh_PullRequestReviewCommentConnection!
  id: ID!
  isResolved: Boolean!
  pullRequest: Gh_PullRequest!
  repository: Gh_Repository!
  resolvedBy: Gh_User
  viewerCanResolve: Boolean!
  viewerCanUnresolve: Boolean!
}

type Gh_PullRequestReviewThreadConnection {
  edges: [Gh_PullRequestReviewThreadEdge]
  nodes: [Gh_PullRequestReviewThread]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PullRequestReviewThreadEdge {
  cursor: String!
  node: Gh_PullRequestReviewThread
}

type Gh_PullRequestRevisionMarker {
  createdAt: Gh_DateTime!
  lastSeenCommit: Gh_Commit!
  pullRequest: Gh_PullRequest!
}

enum Gh_PullRequestState {
  OPEN
  CLOSED
  MERGED
}

type Gh_PullRequestTimelineConnection {
  edges: [Gh_PullRequestTimelineItemEdge]
  nodes: [Gh_PullRequestTimelineItem]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

union Gh_PullRequestTimelineItem = Gh_AssignedEvent | Gh_BaseRefForcePushedEvent | Gh_ClosedEvent | Gh_Commit | Gh_CommitCommentThread | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DeployedEvent | Gh_DeploymentEnvironmentChangedEvent | Gh_HeadRefDeletedEvent | Gh_HeadRefForcePushedEvent | Gh_HeadRefRestoredEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MergedEvent | Gh_MilestonedEvent | Gh_PullRequestReview | Gh_PullRequestReviewComment | Gh_PullRequestReviewThread | Gh_ReferencedEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_ReviewDismissedEvent | Gh_ReviewRequestRemovedEvent | Gh_ReviewRequestedEvent | Gh_SubscribedEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent

type Gh_PullRequestTimelineItemEdge {
  cursor: String!
  node: Gh_PullRequestTimelineItem
}

union Gh_PullRequestTimelineItems = Gh_AddedToProjectEvent | Gh_AssignedEvent | Gh_BaseRefChangedEvent | Gh_BaseRefForcePushedEvent | Gh_ClosedEvent | Gh_CommentDeletedEvent | Gh_ConnectedEvent | Gh_ConvertedNoteToIssueEvent | Gh_CrossReferencedEvent | Gh_DemilestonedEvent | Gh_DeployedEvent | Gh_DeploymentEnvironmentChangedEvent | Gh_DisconnectedEvent | Gh_HeadRefDeletedEvent | Gh_HeadRefForcePushedEvent | Gh_HeadRefRestoredEvent | Gh_IssueComment | Gh_LabeledEvent | Gh_LockedEvent | Gh_MarkedAsDuplicateEvent | Gh_MentionedEvent | Gh_MergedEvent | Gh_MilestonedEvent | Gh_MovedColumnsInProjectEvent | Gh_PinnedEvent | Gh_PullRequestCommit | Gh_PullRequestCommitCommentThread | Gh_PullRequestReview | Gh_PullRequestReviewThread | Gh_PullRequestRevisionMarker | Gh_ReadyForReviewEvent | Gh_ReferencedEvent | Gh_RemovedFromProjectEvent | Gh_RenamedTitleEvent | Gh_ReopenedEvent | Gh_ReviewDismissedEvent | Gh_ReviewRequestRemovedEvent | Gh_ReviewRequestedEvent | Gh_SubscribedEvent | Gh_TransferredEvent | Gh_UnassignedEvent | Gh_UnlabeledEvent | Gh_UnlockedEvent | Gh_UnmarkedAsDuplicateEvent | Gh_UnpinnedEvent | Gh_UnsubscribedEvent | Gh_UserBlockedEvent

type Gh_PullRequestTimelineItemsConnection {
  edges: [Gh_PullRequestTimelineItemsEdge]
  filteredCount: Int!
  nodes: [Gh_PullRequestTimelineItems]
  pageCount: Int!
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  updatedAt: Gh_DateTime!
}

type Gh_PullRequestTimelineItemsEdge {
  cursor: String!
  node: Gh_PullRequestTimelineItems
}

enum Gh_PullRequestTimelineItemsItemType {
  PULL_REQUEST_COMMIT
  PULL_REQUEST_COMMIT_COMMENT_THREAD
  PULL_REQUEST_REVIEW
  PULL_REQUEST_REVIEW_THREAD
  PULL_REQUEST_REVISION_MARKER
  BASE_REF_CHANGED_EVENT
  BASE_REF_FORCE_PUSHED_EVENT
  DEPLOYED_EVENT
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
  HEAD_REF_DELETED_EVENT
  HEAD_REF_FORCE_PUSHED_EVENT
  HEAD_REF_RESTORED_EVENT
  MERGED_EVENT
  REVIEW_DISMISSED_EVENT
  REVIEW_REQUESTED_EVENT
  REVIEW_REQUEST_REMOVED_EVENT
  READY_FOR_REVIEW_EVENT
  ISSUE_COMMENT
  CROSS_REFERENCED_EVENT
  ADDED_TO_PROJECT_EVENT
  ASSIGNED_EVENT
  CLOSED_EVENT
  COMMENT_DELETED_EVENT
  CONNECTED_EVENT
  CONVERTED_NOTE_TO_ISSUE_EVENT
  DEMILESTONED_EVENT
  DISCONNECTED_EVENT
  LABELED_EVENT
  LOCKED_EVENT
  MARKED_AS_DUPLICATE_EVENT
  MENTIONED_EVENT
  MILESTONED_EVENT
  MOVED_COLUMNS_IN_PROJECT_EVENT
  PINNED_EVENT
  REFERENCED_EVENT
  REMOVED_FROM_PROJECT_EVENT
  RENAMED_TITLE_EVENT
  REOPENED_EVENT
  SUBSCRIBED_EVENT
  TRANSFERRED_EVENT
  UNASSIGNED_EVENT
  UNLABELED_EVENT
  UNLOCKED_EVENT
  USER_BLOCKED_EVENT
  UNMARKED_AS_DUPLICATE_EVENT
  UNPINNED_EVENT
  UNSUBSCRIBED_EVENT
}

enum Gh_PullRequestUpdateState {
  OPEN
  CLOSED
}

type Gh_PushAllowance implements Gh_Node {
  actor: Gh_PushAllowanceActor
  branchProtectionRule: Gh_BranchProtectionRule
  id: ID!
}

union Gh_PushAllowanceActor = Gh_App | Gh_Team | Gh_User

type Gh_PushAllowanceConnection {
  edges: [Gh_PushAllowanceEdge]
  nodes: [Gh_PushAllowance]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_PushAllowanceEdge {
  cursor: String!
  node: Gh_PushAllowance
}

type Gh_RateLimit {
  cost: Int!
  limit: Int!
  nodeCount: Int!
  remaining: Int!
  resetAt: Gh_DateTime!
}

interface Gh_Reactable {
  databaseId: Int
  id: ID!
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  viewerCanReact: Boolean!
}

type Gh_ReactingUserConnection {
  edges: [Gh_ReactingUserEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ReactingUserEdge {
  cursor: String!
  node: Gh_User!
  reactedAt: Gh_DateTime!
}

type Gh_Reaction implements Gh_Node {
  content: Gh_ReactionContent!
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
  reactable: Gh_Reactable!
  user: Gh_User
}

type Gh_ReactionConnection {
  edges: [Gh_ReactionEdge]
  nodes: [Gh_Reaction]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  viewerHasReacted: Boolean!
}

enum Gh_ReactionContent {
  THUMBS_UP
  THUMBS_DOWN
  LAUGH
  HOORAY
  CONFUSED
  HEART
  ROCKET
  EYES
}

type Gh_ReactionEdge {
  cursor: String!
  node: Gh_Reaction
}

type Gh_ReactionGroup {
  content: Gh_ReactionContent!
  createdAt: Gh_DateTime
  subject: Gh_Reactable!
  users(after: String, before: String, first: Int, last: Int): Gh_ReactingUserConnection!
  viewerHasReacted: Boolean!
}

input Gh_ReactionOrder {
  field: Gh_ReactionOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_ReactionOrderField {
  CREATED_AT
}

type Gh_ReadyForReviewEvent implements Gh_Node & Gh_UniformResourceLocatable {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
  resourcePath: Gh_URI!
  url: Gh_URI!
}

type Gh_Ref implements Gh_Node {
  associatedPullRequests(states: [Gh_PullRequestState!], labels: [String!], headRefName: String, baseRefName: String, orderBy: Gh_IssueOrder, after: String, before: String, first: Int, last: Int): Gh_PullRequestConnection!
  id: ID!
  name: String!
  prefix: String!
  repository: Gh_Repository!
  target: Gh_GitObject!
}

type Gh_RefConnection {
  edges: [Gh_RefEdge]
  nodes: [Gh_Ref]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RefEdge {
  cursor: String!
  node: Gh_Ref
}

type Gh_ReferencedEvent implements Gh_Node {
  actor: Gh_Actor
  commit: Gh_Commit
  commitRepository: Gh_Repository!
  createdAt: Gh_DateTime!
  id: ID!
  isCrossRepository: Boolean!
  isDirectReference: Boolean!
  subject: Gh_ReferencedSubject!
}

union Gh_ReferencedSubject = Gh_Issue | Gh_PullRequest

input Gh_RefOrder {
  field: Gh_RefOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_RefOrderField {
  TAG_COMMIT_DATE
  ALPHABETICAL
}

input Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  enterpriseId: ID!
  clientMutationId: String
}

type Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  clientMutationId: String
  identityProvider: Gh_EnterpriseIdentityProvider
}

type Gh_RegistryPackage implements Gh_Node {
  color: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  id: ID!
  latestVersion: Gh_RegistryPackageVersion @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  name: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  nameWithOwner: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  packageFileByGuid(guid: String!): Gh_RegistryPackageFile @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.")
  packageFileBySha256(sha256: String!): Gh_RegistryPackageFile @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.")
  packageType: Gh_RegistryPackageType! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  preReleaseVersions(after: String, before: String, first: Int, last: Int): Gh_RegistryPackageVersionConnection @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  registryPackageType: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  repository: Gh_Repository @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  statistics: Gh_RegistryPackageStatistics @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  tags(after: String, before: String, first: Int, last: Int): Gh_RegistryPackageTagConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.")
  topics(after: String, before: String, first: Int, last: Int): Gh_TopicConnection @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object. Removal on 2020-04-01 UTC.")
  version(version: String!): Gh_RegistryPackageVersion @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  versionByPlatform(version: String!, platform: String!): Gh_RegistryPackageVersion @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  versionBySha256(sha256: String!): Gh_RegistryPackageVersion @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  versions(after: String, before: String, first: Int, last: Int): Gh_RegistryPackageVersionConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
  versionsByMetadatum(metadatum: Gh_RegistryPackageMetadatum!, after: String, before: String, first: Int, last: Int): Gh_RegistryPackageVersionConnection @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `Package` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageConnection {
  edges: [Gh_RegistryPackageEdge]
  nodes: [Gh_RegistryPackage]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RegistryPackageDependency implements Gh_Node {
  dependencyType: Gh_RegistryPackageDependencyType! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.")
  id: ID!
  name: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.")
  version: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageDependency` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageDependencyConnection {
  edges: [Gh_RegistryPackageDependencyEdge]
  nodes: [Gh_RegistryPackageDependency]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RegistryPackageDependencyEdge {
  cursor: String!
  node: Gh_RegistryPackageDependency
}

enum Gh_RegistryPackageDependencyType {
  DEFAULT
  DEV
  TEST
  PEER
  OPTIONAL
  BUNDLED
}

type Gh_RegistryPackageEdge {
  cursor: String!
  node: Gh_RegistryPackage
}

type Gh_RegistryPackageFile implements Gh_Node {
  guid: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  id: ID!
  md5: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  metadataUrl: Gh_URI! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  name: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  packageVersion: Gh_RegistryPackageVersion! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  sha1: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  sha256: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  size: Int @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
  updatedAt: Gh_DateTime!
  url: Gh_URI! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageFile` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageFileConnection {
  edges: [Gh_RegistryPackageFileEdge]
  nodes: [Gh_RegistryPackageFile]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RegistryPackageFileEdge {
  cursor: String!
  node: Gh_RegistryPackageFile
}

input Gh_RegistryPackageMetadatum {
  name: String!
  value: String!
  update: Boolean
}

interface Gh_RegistryPackageOwner {
  id: ID!
  registryPackages(after: String, before: String, first: Int, last: Int, name: String, names: [String], repositoryId: ID, packageType: Gh_RegistryPackageType, registryPackageType: String, publicOnly: Boolean = false): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.")
}

interface Gh_RegistryPackageSearch {
  id: ID!
  registryPackagesForQuery(after: String, before: String, first: Int, last: Int, query: String, packageType: Gh_RegistryPackageType): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageStatistics {
  downloadsThisMonth: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsThisWeek: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsThisYear: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsToday: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsTotalCount: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageStatistics` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageTag implements Gh_Node {
  id: ID!
  name: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.")
  version: Gh_RegistryPackageVersion @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageTag` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageTagConnection {
  edges: [Gh_RegistryPackageTagEdge]
  nodes: [Gh_RegistryPackageTag]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RegistryPackageTagEdge {
  cursor: String!
  node: Gh_RegistryPackageTag
}

enum Gh_RegistryPackageType {
  NPM
  RUBYGEMS
  MAVEN
  DOCKER
  DEBIAN
  NUGET
  PYTHON
}

type Gh_RegistryPackageVersion implements Gh_Node {
  dependencies(after: String, before: String, first: Int, last: Int, type: Gh_RegistryPackageDependencyType): Gh_RegistryPackageDependencyConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  fileByName(filename: String!): Gh_RegistryPackageFile @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  files(after: String, before: String, first: Int, last: Int): Gh_RegistryPackageFileConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  id: ID!
  installationCommand: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  manifest: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  platform: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  preRelease: Boolean! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  readme: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  readmeHtml: Gh_HTML @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  registryPackage: Gh_RegistryPackage @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  release: Gh_Release @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  sha256: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  size: Int @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  statistics: Gh_RegistryPackageVersionStatistics @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  summary: String @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  updatedAt: Gh_DateTime! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  version: String! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
  viewerCanEdit: Boolean! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersion` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_RegistryPackageVersionConnection {
  edges: [Gh_RegistryPackageVersionEdge]
  nodes: [Gh_RegistryPackageVersion]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RegistryPackageVersionEdge {
  cursor: String!
  node: Gh_RegistryPackageVersion
}

type Gh_RegistryPackageVersionStatistics {
  downloadsThisMonth: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsThisWeek: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsThisYear: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsToday: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.")
  downloadsTotalCount: Int! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageVersionStatistics` object instead. Removal on 2020-04-01 UTC.")
}

type Gh_Release implements Gh_Node & Gh_UniformResourceLocatable {
  author: Gh_User
  createdAt: Gh_DateTime!
  description: String
  descriptionHTML: Gh_HTML
  id: ID!
  isDraft: Boolean!
  isPrerelease: Boolean!
  name: String
  publishedAt: Gh_DateTime
  releaseAssets(after: String, before: String, first: Int, last: Int, name: String): Gh_ReleaseAssetConnection!
  resourcePath: Gh_URI!
  shortDescriptionHTML(limit: Int = 200): Gh_HTML
  tag: Gh_Ref
  tagName: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
}

type Gh_ReleaseAsset implements Gh_Node {
  contentType: String!
  createdAt: Gh_DateTime!
  downloadCount: Int!
  downloadUrl: Gh_URI!
  id: ID!
  name: String!
  release: Gh_Release
  size: Int!
  updatedAt: Gh_DateTime!
  uploadedBy: Gh_User!
  url: Gh_URI!
}

type Gh_ReleaseAssetConnection {
  edges: [Gh_ReleaseAssetEdge]
  nodes: [Gh_ReleaseAsset]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ReleaseAssetEdge {
  cursor: String!
  node: Gh_ReleaseAsset
}

type Gh_ReleaseConnection {
  edges: [Gh_ReleaseEdge]
  nodes: [Gh_Release]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ReleaseEdge {
  cursor: String!
  node: Gh_Release
}

input Gh_ReleaseOrder {
  field: Gh_ReleaseOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_ReleaseOrderField {
  CREATED_AT
  NAME
}

input Gh_RemoveAssigneesFromAssignableInput {
  assignableId: ID!
  assigneeIds: [ID!]!
  clientMutationId: String
}

type Gh_RemoveAssigneesFromAssignablePayload {
  assignable: Gh_Assignable
  clientMutationId: String
}

type Gh_RemovedFromProjectEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  id: ID!
}

input Gh_RemoveEnterpriseAdminInput {
  enterpriseId: ID!
  login: String!
  clientMutationId: String
}

type Gh_RemoveEnterpriseAdminPayload {
  admin: Gh_User
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
  viewer: Gh_User
}

input Gh_RemoveEnterpriseOrganizationInput {
  enterpriseId: ID!
  organizationId: ID!
  clientMutationId: String
}

type Gh_RemoveEnterpriseOrganizationPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  organization: Gh_Organization
  viewer: Gh_User
}

input Gh_RemoveLabelsFromLabelableInput {
  labelableId: ID!
  labelIds: [ID!]!
  clientMutationId: String
}

type Gh_RemoveLabelsFromLabelablePayload {
  clientMutationId: String
  labelable: Gh_Labelable
}

input Gh_RemoveOutsideCollaboratorInput {
  userId: ID!
  organizationId: ID!
  clientMutationId: String
}

type Gh_RemoveOutsideCollaboratorPayload {
  clientMutationId: String
  removedUser: Gh_User
}

input Gh_RemoveReactionInput {
  subjectId: ID!
  content: Gh_ReactionContent!
  clientMutationId: String
}

type Gh_RemoveReactionPayload {
  clientMutationId: String
  reaction: Gh_Reaction
  subject: Gh_Reactable
}

input Gh_RemoveStarInput {
  starrableId: ID!
  clientMutationId: String
}

type Gh_RemoveStarPayload {
  clientMutationId: String
  starrable: Gh_Starrable
}

type Gh_RenamedTitleEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  currentTitle: String!
  id: ID!
  previousTitle: String!
  subject: Gh_RenamedTitleSubject!
}

union Gh_RenamedTitleSubject = Gh_Issue | Gh_PullRequest

type Gh_ReopenedEvent implements Gh_Node {
  actor: Gh_Actor
  closable: Gh_Closable!
  createdAt: Gh_DateTime!
  id: ID!
}

input Gh_ReopenIssueInput {
  issueId: ID!
  clientMutationId: String
}

type Gh_ReopenIssuePayload {
  clientMutationId: String
  issue: Gh_Issue
}

input Gh_ReopenPullRequestInput {
  pullRequestId: ID!
  clientMutationId: String
}

type Gh_ReopenPullRequestPayload {
  clientMutationId: String
  pullRequest: Gh_PullRequest
}

type Gh_RepoAccessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoAccessAuditEntryVisibility
}

enum Gh_RepoAccessAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoAddMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoAddMemberAuditEntryVisibility
}

enum Gh_RepoAddMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoAddTopicAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData & Gh_TopicAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  topic: Gh_Topic
  topicName: String
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoArchivedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoArchivedAuditEntryVisibility
}

enum Gh_RepoArchivedAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoChangeMergeSettingAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isEnabled: Boolean
  mergeType: Gh_RepoChangeMergeSettingAuditEntryMergeType
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

enum Gh_RepoChangeMergeSettingAuditEntryMergeType {
  MERGE
  REBASE
  SQUASH
}

type Gh_RepoConfigDisableAnonymousGitAccessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigDisableCollaboratorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigDisableContributorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigDisableSockpuppetDisallowedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigEnableAnonymousGitAccessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigEnableCollaboratorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigEnableContributorsOnlyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigEnableSockpuppetDisallowedAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigLockAnonymousGitAccessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoConfigUnlockAnonymousGitAccessAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepoCreateAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  forkParentName: String
  forkSourceName: String
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoCreateAuditEntryVisibility
}

enum Gh_RepoCreateAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoDestroyAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoDestroyAuditEntryVisibility
}

enum Gh_RepoDestroyAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoRemoveMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
  visibility: Gh_RepoRemoveMemberAuditEntryVisibility
}

enum Gh_RepoRemoveMemberAuditEntryVisibility {
  INTERNAL
  PRIVATE
  PUBLIC
}

type Gh_RepoRemoveTopicAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_RepositoryAuditEntryData & Gh_OrganizationAuditEntryData & Gh_TopicAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  topic: Gh_Topic
  topicName: String
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_Repository implements Gh_Node & Gh_ProjectOwner & Gh_RegistryPackageOwner & Gh_RegistryPackageSearch & Gh_Subscribable & Gh_Starrable & Gh_UniformResourceLocatable & Gh_RepositoryInfo {
  assignableUsers(query: String, after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  branchProtectionRules(after: String, before: String, first: Int, last: Int): Gh_BranchProtectionRuleConnection!
  codeOfConduct: Gh_CodeOfConduct
  collaborators(affiliation: Gh_CollaboratorAffiliation, query: String, after: String, before: String, first: Int, last: Int): Gh_RepositoryCollaboratorConnection
  commitComments(after: String, before: String, first: Int, last: Int): Gh_CommitCommentConnection!
  createdAt: Gh_DateTime!
  databaseId: Int
  defaultBranchRef: Gh_Ref
  deleteBranchOnMerge: Boolean!
  deployKeys(after: String, before: String, first: Int, last: Int): Gh_DeployKeyConnection!
  deployments(environments: [String!], orderBy: Gh_DeploymentOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int): Gh_DeploymentConnection!
  description: String
  descriptionHTML: Gh_HTML!
  diskUsage: Int
  forkCount: Int!
  forks(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection!
  fundingLinks: [Gh_FundingLink!]!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: Gh_URI
  id: ID!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  issue(number: Int!): Gh_Issue
  issueOrPullRequest(number: Int!): Gh_IssueOrPullRequest
  issues(orderBy: Gh_IssueOrder, labels: [String!], states: [Gh_IssueState!], filterBy: Gh_IssueFilters, after: String, before: String, first: Int, last: Int): Gh_IssueConnection!
  label(name: String!): Gh_Label
  labels(orderBy: Gh_LabelOrder = {field: CREATED_AT, direction: ASC}, after: String, before: String, first: Int, last: Int, query: String): Gh_LabelConnection
  languages(after: String, before: String, first: Int, last: Int, orderBy: Gh_LanguageOrder): Gh_LanguageConnection
  licenseInfo: Gh_License
  lockReason: Gh_RepositoryLockReason
  mentionableUsers(query: String, after: String, before: String, first: Int, last: Int): Gh_UserConnection!
  mergeCommitAllowed: Boolean!
  milestone(number: Int!): Gh_Milestone
  milestones(after: String, before: String, first: Int, last: Int, states: [Gh_MilestoneState!], orderBy: Gh_MilestoneOrder): Gh_MilestoneConnection
  mirrorUrl: Gh_URI
  name: String!
  nameWithOwner: String!
  object(oid: Gh_GitObjectID, expression: String): Gh_GitObject
  openGraphImageUrl: Gh_URI!
  owner: Gh_RepositoryOwner!
  parent: Gh_Repository
  primaryLanguage: Gh_Language
  project(number: Int!): Gh_Project
  projects(orderBy: Gh_ProjectOrder, search: String, states: [Gh_ProjectState!], after: String, before: String, first: Int, last: Int): Gh_ProjectConnection!
  projectsResourcePath: Gh_URI!
  projectsUrl: Gh_URI!
  pullRequest(number: Int!): Gh_PullRequest
  pullRequests(states: [Gh_PullRequestState!], labels: [String!], headRefName: String, baseRefName: String, orderBy: Gh_IssueOrder, after: String, before: String, first: Int, last: Int): Gh_PullRequestConnection!
  pushedAt: Gh_DateTime
  rebaseMergeAllowed: Boolean!
  ref(qualifiedName: String!): Gh_Ref
  refs(after: String, before: String, first: Int, last: Int, refPrefix: String!, direction: Gh_OrderDirection, orderBy: Gh_RefOrder): Gh_RefConnection
  registryPackages(after: String, before: String, first: Int, last: Int, name: String, names: [String], repositoryId: ID, packageType: Gh_RegistryPackageType, registryPackageType: String, publicOnly: Boolean = false): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.")
  registryPackagesForQuery(after: String, before: String, first: Int, last: Int, query: String, packageType: Gh_RegistryPackageType): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.")
  release(tagName: String!): Gh_Release
  releases(after: String, before: String, first: Int, last: Int, orderBy: Gh_ReleaseOrder): Gh_ReleaseConnection!
  repositoryTopics(after: String, before: String, first: Int, last: Int): Gh_RepositoryTopicConnection!
  resourcePath: Gh_URI!
  shortDescriptionHTML(limit: Int = 200): Gh_HTML!
  squashMergeAllowed: Boolean!
  sshUrl: Gh_GitSSHRemote!
  stargazers(after: String, before: String, first: Int, last: Int, orderBy: Gh_StarOrder): Gh_StargazerConnection!
  tempCloneToken: String
  templateRepository: Gh_Repository
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  usesCustomOpenGraphImage: Boolean!
  viewerCanAdminister: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdateTopics: Boolean!
  viewerHasStarred: Boolean!
  viewerPermission: Gh_RepositoryPermission
  viewerSubscription: Gh_SubscriptionState
  vulnerabilityAlerts(after: String, before: String, first: Int, last: Int): Gh_RepositoryVulnerabilityAlertConnection
  watchers(after: String, before: String, first: Int, last: Int): Gh_UserConnection!
}

enum Gh_RepositoryAffiliation {
  OWNER
  COLLABORATOR
  ORGANIZATION_MEMBER
}

interface Gh_RepositoryAuditEntryData {
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
}

type Gh_RepositoryCollaboratorConnection {
  edges: [Gh_RepositoryCollaboratorEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RepositoryCollaboratorEdge {
  cursor: String!
  node: Gh_User!
  permission: Gh_RepositoryPermission!
  permissionSources: [Gh_PermissionSource!]
}

type Gh_RepositoryConnection {
  edges: [Gh_RepositoryEdge]
  nodes: [Gh_Repository]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
  totalDiskUsage: Int!
}

enum Gh_RepositoryContributionType {
  COMMIT
  ISSUE
  PULL_REQUEST
  REPOSITORY
  PULL_REQUEST_REVIEW
}

type Gh_RepositoryEdge {
  cursor: String!
  node: Gh_Repository
}

interface Gh_RepositoryInfo {
  createdAt: Gh_DateTime!
  description: String
  descriptionHTML: Gh_HTML!
  forkCount: Int!
  hasIssuesEnabled: Boolean!
  hasProjectsEnabled: Boolean!
  hasWikiEnabled: Boolean!
  homepageUrl: Gh_URI
  isArchived: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isMirror: Boolean!
  isPrivate: Boolean!
  isTemplate: Boolean!
  licenseInfo: Gh_License
  lockReason: Gh_RepositoryLockReason
  mirrorUrl: Gh_URI
  name: String!
  nameWithOwner: String!
  openGraphImageUrl: Gh_URI!
  owner: Gh_RepositoryOwner!
  pushedAt: Gh_DateTime
  resourcePath: Gh_URI!
  shortDescriptionHTML(limit: Int = 200): Gh_HTML!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  usesCustomOpenGraphImage: Boolean!
}

input Gh_RepositoryInvitationOrder {
  field: Gh_RepositoryInvitationOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_RepositoryInvitationOrderField {
  CREATED_AT
  INVITEE_LOGIN
}

enum Gh_RepositoryLockReason {
  MOVING
  BILLING
  RENAME
  MIGRATING
}

interface Gh_RepositoryNode {
  repository: Gh_Repository!
}

input Gh_RepositoryOrder {
  field: Gh_RepositoryOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_RepositoryOrderField {
  CREATED_AT
  UPDATED_AT
  PUSHED_AT
  NAME
  STARGAZERS
}

interface Gh_RepositoryOwner {
  avatarUrl(size: Int): Gh_URI!
  id: ID!
  login: String!
  pinnedRepositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection! @deprecated(reason: "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-10-01 UTC.")
  repositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int, isFork: Boolean): Gh_RepositoryConnection!
  repository(name: String!): Gh_Repository
  resourcePath: Gh_URI!
  url: Gh_URI!
}

enum Gh_RepositoryPermission {
  ADMIN
  MAINTAIN
  WRITE
  TRIAGE
  READ
}

enum Gh_RepositoryPrivacy {
  PUBLIC
  PRIVATE
}

type Gh_RepositoryTopic implements Gh_Node & Gh_UniformResourceLocatable {
  id: ID!
  resourcePath: Gh_URI!
  topic: Gh_Topic!
  url: Gh_URI!
}

type Gh_RepositoryTopicConnection {
  edges: [Gh_RepositoryTopicEdge]
  nodes: [Gh_RepositoryTopic]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RepositoryTopicEdge {
  cursor: String!
  node: Gh_RepositoryTopic
}

enum Gh_RepositoryVisibility {
  PRIVATE
  PUBLIC
  INTERNAL
}

type Gh_RepositoryVisibilityChangeDisableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepositoryVisibilityChangeEnableAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_EnterpriseAuditEntryData & Gh_OrganizationAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  enterpriseResourcePath: Gh_URI
  enterpriseSlug: String
  enterpriseUrl: Gh_URI
  id: ID!
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_RepositoryVulnerabilityAlert implements Gh_Node & Gh_RepositoryNode {
  affectedRange: String! @deprecated(reason: "advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.vulnerableVersionRange` instead. Removal on 2019-10-01 UTC.")
  createdAt: Gh_DateTime!
  dismissReason: String
  dismissedAt: Gh_DateTime
  dismisser: Gh_User
  externalIdentifier: String @deprecated(reason: "advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.identifiers` instead. Removal on 2019-10-01 UTC.")
  externalReference: String! @deprecated(reason: "advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.references` instead. Removal on 2019-10-01 UTC.")
  fixedIn: String @deprecated(reason: "advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.firstPatchedVersion` instead. Removal on 2019-10-01 UTC.")
  id: ID!
  packageName: String! @deprecated(reason: "advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.package` instead. Removal on 2019-10-01 UTC.")
  repository: Gh_Repository!
  securityAdvisory: Gh_SecurityAdvisory
  securityVulnerability: Gh_SecurityVulnerability
  vulnerableManifestFilename: String!
  vulnerableManifestPath: String!
  vulnerableRequirements: String
}

type Gh_RepositoryVulnerabilityAlertConnection {
  edges: [Gh_RepositoryVulnerabilityAlertEdge]
  nodes: [Gh_RepositoryVulnerabilityAlert]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_RepositoryVulnerabilityAlertEdge {
  cursor: String!
  node: Gh_RepositoryVulnerabilityAlert
}

union Gh_RequestedReviewer = Gh_Mannequin | Gh_Team | Gh_User

input Gh_RequestReviewsInput {
  pullRequestId: ID!
  userIds: [ID!]
  teamIds: [ID!]
  union: Boolean
  clientMutationId: String
}

type Gh_RequestReviewsPayload {
  actor: Gh_Actor
  clientMutationId: String
  pullRequest: Gh_PullRequest
  requestedReviewersEdge: Gh_UserEdge
}

input Gh_ResolveReviewThreadInput {
  threadId: ID!
  clientMutationId: String
}

type Gh_ResolveReviewThreadPayload {
  clientMutationId: String
  thread: Gh_PullRequestReviewThread
}

type Gh_RestrictedContribution implements Gh_Contribution {
  isRestricted: Boolean!
  occurredAt: Gh_DateTime!
  resourcePath: Gh_URI!
  url: Gh_URI!
  user: Gh_User!
}

type Gh_ReviewDismissalAllowance implements Gh_Node {
  actor: Gh_ReviewDismissalAllowanceActor
  branchProtectionRule: Gh_BranchProtectionRule
  id: ID!
}

union Gh_ReviewDismissalAllowanceActor = Gh_Team | Gh_User

type Gh_ReviewDismissalAllowanceConnection {
  edges: [Gh_ReviewDismissalAllowanceEdge]
  nodes: [Gh_ReviewDismissalAllowance]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ReviewDismissalAllowanceEdge {
  cursor: String!
  node: Gh_ReviewDismissalAllowance
}

type Gh_ReviewDismissedEvent implements Gh_Node & Gh_UniformResourceLocatable {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  databaseId: Int
  dismissalMessage: String
  dismissalMessageHTML: String
  id: ID!
  previousReviewState: Gh_PullRequestReviewState!
  pullRequest: Gh_PullRequest!
  pullRequestCommit: Gh_PullRequestCommit
  resourcePath: Gh_URI!
  review: Gh_PullRequestReview
  url: Gh_URI!
}

type Gh_ReviewRequest implements Gh_Node {
  databaseId: Int
  id: ID!
  pullRequest: Gh_PullRequest!
  requestedReviewer: Gh_RequestedReviewer
}

type Gh_ReviewRequestConnection {
  edges: [Gh_ReviewRequestEdge]
  nodes: [Gh_ReviewRequest]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_ReviewRequestedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
  requestedReviewer: Gh_RequestedReviewer
}

type Gh_ReviewRequestEdge {
  cursor: String!
  node: Gh_ReviewRequest
}

type Gh_ReviewRequestRemovedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  pullRequest: Gh_PullRequest!
  requestedReviewer: Gh_RequestedReviewer
}

enum Gh_SamlDigestAlgorithm {
  SHA1
  SHA256
  SHA384
  SHA512
}

enum Gh_SamlSignatureAlgorithm {
  RSA_SHA1
  RSA_SHA256
  RSA_SHA384
  RSA_SHA512
}

type Gh_SavedReply implements Gh_Node {
  body: String!
  bodyHTML: Gh_HTML!
  databaseId: Int
  id: ID!
  title: String!
  user: Gh_Actor
}

type Gh_SavedReplyConnection {
  edges: [Gh_SavedReplyEdge]
  nodes: [Gh_SavedReply]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_SavedReplyEdge {
  cursor: String!
  node: Gh_SavedReply
}

input Gh_SavedReplyOrder {
  field: Gh_SavedReplyOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_SavedReplyOrderField {
  UPDATED_AT
}

union Gh_SearchResultItem = Gh_App | Gh_Issue | Gh_MarketplaceListing | Gh_Organization | Gh_PullRequest | Gh_Repository | Gh_User

type Gh_SearchResultItemConnection {
  codeCount: Int!
  edges: [Gh_SearchResultItemEdge]
  issueCount: Int!
  nodes: [Gh_SearchResultItem]
  pageInfo: Gh_PageInfo!
  repositoryCount: Int!
  userCount: Int!
  wikiCount: Int!
}

type Gh_SearchResultItemEdge {
  cursor: String!
  node: Gh_SearchResultItem
  textMatches: [Gh_TextMatch]
}

enum Gh_SearchType {
  ISSUE
  REPOSITORY
  USER
}

type Gh_SecurityAdvisory implements Gh_Node {
  databaseId: Int
  description: String!
  ghsaId: String!
  id: ID!
  identifiers: [Gh_SecurityAdvisoryIdentifier!]!
  origin: String!
  publishedAt: Gh_DateTime!
  references: [Gh_SecurityAdvisoryReference!]!
  severity: Gh_SecurityAdvisorySeverity!
  summary: String!
  updatedAt: Gh_DateTime!
  vulnerabilities(orderBy: Gh_SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}, ecosystem: Gh_SecurityAdvisoryEcosystem, package: String, severities: [Gh_SecurityAdvisorySeverity!], after: String, before: String, first: Int, last: Int): Gh_SecurityVulnerabilityConnection!
  withdrawnAt: Gh_DateTime
}

type Gh_SecurityAdvisoryConnection {
  edges: [Gh_SecurityAdvisoryEdge]
  nodes: [Gh_SecurityAdvisory]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

enum Gh_SecurityAdvisoryEcosystem {
  RUBYGEMS
  NPM
  PIP
  MAVEN
  NUGET
  COMPOSER
}

type Gh_SecurityAdvisoryEdge {
  cursor: String!
  node: Gh_SecurityAdvisory
}

type Gh_SecurityAdvisoryIdentifier {
  type: String!
  value: String!
}

input Gh_SecurityAdvisoryIdentifierFilter {
  type: Gh_SecurityAdvisoryIdentifierType!
  value: String!
}

enum Gh_SecurityAdvisoryIdentifierType {
  CVE
  GHSA
}

input Gh_SecurityAdvisoryOrder {
  field: Gh_SecurityAdvisoryOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_SecurityAdvisoryOrderField {
  PUBLISHED_AT
  UPDATED_AT
}

type Gh_SecurityAdvisoryPackage {
  ecosystem: Gh_SecurityAdvisoryEcosystem!
  name: String!
}

type Gh_SecurityAdvisoryPackageVersion {
  identifier: String!
}

type Gh_SecurityAdvisoryReference {
  url: Gh_URI!
}

enum Gh_SecurityAdvisorySeverity {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

type Gh_SecurityVulnerability {
  advisory: Gh_SecurityAdvisory!
  firstPatchedVersion: Gh_SecurityAdvisoryPackageVersion
  package: Gh_SecurityAdvisoryPackage!
  severity: Gh_SecurityAdvisorySeverity!
  updatedAt: Gh_DateTime!
  vulnerableVersionRange: String!
}

type Gh_SecurityVulnerabilityConnection {
  edges: [Gh_SecurityVulnerabilityEdge]
  nodes: [Gh_SecurityVulnerability]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_SecurityVulnerabilityEdge {
  cursor: String!
  node: Gh_SecurityVulnerability
}

input Gh_SecurityVulnerabilityOrder {
  field: Gh_SecurityVulnerabilityOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_SecurityVulnerabilityOrderField {
  UPDATED_AT
}

interface Gh_Sponsorable {
  sponsorsListing: Gh_SponsorsListing
  sponsorshipsAsMaintainer(after: String, before: String, first: Int, last: Int, includePrivate: Boolean = false, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
  sponsorshipsAsSponsor(after: String, before: String, first: Int, last: Int, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
}

type Gh_Sponsorship implements Gh_Node {
  createdAt: Gh_DateTime!
  id: ID!
  maintainer: Gh_User! @deprecated(reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.")
  privacyLevel: Gh_SponsorshipPrivacy!
  sponsor: Gh_User
  sponsorable: Gh_Sponsorable!
  tier: Gh_SponsorsTier
}

type Gh_SponsorshipConnection {
  edges: [Gh_SponsorshipEdge]
  nodes: [Gh_Sponsorship]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_SponsorshipEdge {
  cursor: String!
  node: Gh_Sponsorship
}

input Gh_SponsorshipOrder {
  field: Gh_SponsorshipOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_SponsorshipOrderField {
  CREATED_AT
}

enum Gh_SponsorshipPrivacy {
  PUBLIC
  PRIVATE
}

type Gh_SponsorsListing implements Gh_Node {
  createdAt: Gh_DateTime!
  fullDescription: String!
  fullDescriptionHTML: Gh_HTML!
  id: ID!
  name: String!
  shortDescription: String!
  slug: String!
  tiers(after: String, before: String, first: Int, last: Int, orderBy: Gh_SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}): Gh_SponsorsTierConnection
}

type Gh_SponsorsTier implements Gh_Node {
  adminInfo: Gh_SponsorsTierAdminInfo
  createdAt: Gh_DateTime!
  description: String!
  descriptionHTML: Gh_HTML!
  id: ID!
  monthlyPriceInCents: Int!
  monthlyPriceInDollars: Int!
  name: String!
  sponsorsListing: Gh_SponsorsListing!
  updatedAt: Gh_DateTime!
}

type Gh_SponsorsTierAdminInfo {
  sponsorships(after: String, before: String, first: Int, last: Int, includePrivate: Boolean = false, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
}

type Gh_SponsorsTierConnection {
  edges: [Gh_SponsorsTierEdge]
  nodes: [Gh_SponsorsTier]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_SponsorsTierEdge {
  cursor: String!
  node: Gh_SponsorsTier
}

input Gh_SponsorsTierOrder {
  field: Gh_SponsorsTierOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_SponsorsTierOrderField {
  CREATED_AT
  MONTHLY_PRICE_IN_CENTS
}

type Gh_StargazerConnection {
  edges: [Gh_StargazerEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_StargazerEdge {
  cursor: String!
  node: Gh_User!
  starredAt: Gh_DateTime!
}

input Gh_StarOrder {
  field: Gh_StarOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_StarOrderField {
  STARRED_AT
}

interface Gh_Starrable {
  id: ID!
  stargazers(after: String, before: String, first: Int, last: Int, orderBy: Gh_StarOrder): Gh_StargazerConnection!
  viewerHasStarred: Boolean!
}

type Gh_StarredRepositoryConnection {
  edges: [Gh_StarredRepositoryEdge]
  nodes: [Gh_Repository]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_StarredRepositoryEdge {
  cursor: String!
  node: Gh_Repository!
  starredAt: Gh_DateTime!
}

type Gh_Status implements Gh_Node {
  commit: Gh_Commit
  context(name: String!): Gh_StatusContext
  contexts: [Gh_StatusContext!]!
  id: ID!
  state: Gh_StatusState!
}

type Gh_StatusContext implements Gh_Node {
  avatarUrl(size: Int = 40): Gh_URI
  commit: Gh_Commit
  context: String!
  createdAt: Gh_DateTime!
  creator: Gh_Actor
  description: String
  id: ID!
  state: Gh_StatusState!
  targetUrl: Gh_URI
}

enum Gh_StatusState {
  EXPECTED
  ERROR
  FAILURE
  PENDING
  SUCCESS
}

input Gh_SubmitPullRequestReviewInput {
  pullRequestId: ID
  pullRequestReviewId: ID
  event: Gh_PullRequestReviewEvent!
  body: String
  clientMutationId: String
}

type Gh_SubmitPullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
}

interface Gh_Subscribable {
  id: ID!
  viewerCanSubscribe: Boolean!
  viewerSubscription: Gh_SubscriptionState
}

type Gh_SubscribedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  subscribable: Gh_Subscribable!
}

enum Gh_SubscriptionState {
  UNSUBSCRIBED
  SUBSCRIBED
  IGNORED
}

type Gh_SuggestedReviewer {
  isAuthor: Boolean!
  isCommenter: Boolean!
  reviewer: Gh_User!
}

type Gh_Team implements Gh_Node & Gh_Subscribable & Gh_MemberStatusable {
  ancestors(after: String, before: String, first: Int, last: Int): Gh_TeamConnection!
  avatarUrl(size: Int = 400): Gh_URI
  childTeams(orderBy: Gh_TeamOrder, userLogins: [String!], immediateOnly: Boolean = true, after: String, before: String, first: Int, last: Int): Gh_TeamConnection!
  combinedSlug: String!
  createdAt: Gh_DateTime!
  description: String
  discussion(number: Int!): Gh_TeamDiscussion
  discussions(after: String, before: String, first: Int, last: Int, isPinned: Boolean, orderBy: Gh_TeamDiscussionOrder): Gh_TeamDiscussionConnection!
  discussionsResourcePath: Gh_URI!
  discussionsUrl: Gh_URI!
  editTeamResourcePath: Gh_URI!
  editTeamUrl: Gh_URI!
  id: ID!
  invitations(after: String, before: String, first: Int, last: Int): Gh_OrganizationInvitationConnection
  memberStatuses(after: String, before: String, first: Int, last: Int, orderBy: Gh_UserStatusOrder = {field: UPDATED_AT, direction: DESC}): Gh_UserStatusConnection!
  members(after: String, before: String, first: Int, last: Int, query: String, membership: Gh_TeamMembershipType = ALL, role: Gh_TeamMemberRole, orderBy: Gh_TeamMemberOrder): Gh_TeamMemberConnection!
  membersResourcePath: Gh_URI!
  membersUrl: Gh_URI!
  name: String!
  newTeamResourcePath: Gh_URI!
  newTeamUrl: Gh_URI!
  organization: Gh_Organization!
  parentTeam: Gh_Team
  privacy: Gh_TeamPrivacy!
  repositories(after: String, before: String, first: Int, last: Int, query: String, orderBy: Gh_TeamRepositoryOrder): Gh_TeamRepositoryConnection!
  repositoriesResourcePath: Gh_URI!
  repositoriesUrl: Gh_URI!
  resourcePath: Gh_URI!
  slug: String!
  teamsResourcePath: Gh_URI!
  teamsUrl: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  viewerCanAdminister: Boolean!
  viewerCanSubscribe: Boolean!
  viewerSubscription: Gh_SubscriptionState
}

type Gh_TeamAddMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_TeamAddRepositoryAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TeamAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

interface Gh_TeamAuditEntryData {
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
}

type Gh_TeamChangeParentTeamAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  parentTeam: Gh_Team
  parentTeamName: String
  parentTeamNameWas: String
  parentTeamResourcePath: Gh_URI
  parentTeamUrl: Gh_URI
  parentTeamWas: Gh_Team
  parentTeamWasResourcePath: Gh_URI
  parentTeamWasUrl: Gh_URI
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_TeamConnection {
  edges: [Gh_TeamEdge]
  nodes: [Gh_Team]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TeamDiscussion implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Reactable & Gh_Subscribable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  bodyVersion: String!
  comments(after: String, before: String, first: Int, last: Int, orderBy: Gh_TeamDiscussionCommentOrder, fromComment: Int): Gh_TeamDiscussionCommentConnection!
  commentsResourcePath: Gh_URI!
  commentsUrl: Gh_URI!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  isPinned: Boolean!
  isPrivate: Boolean!
  lastEditedAt: Gh_DateTime
  number: Int!
  publishedAt: Gh_DateTime
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  resourcePath: Gh_URI!
  team: Gh_Team!
  title: String!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanPin: Boolean!
  viewerCanReact: Boolean!
  viewerCanSubscribe: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
  viewerSubscription: Gh_SubscriptionState
}

type Gh_TeamDiscussionComment implements Gh_Node & Gh_Comment & Gh_Deletable & Gh_Reactable & Gh_UniformResourceLocatable & Gh_Updatable & Gh_UpdatableComment {
  author: Gh_Actor
  authorAssociation: Gh_CommentAuthorAssociation!
  body: String!
  bodyHTML: Gh_HTML!
  bodyText: String!
  bodyVersion: String!
  createdAt: Gh_DateTime!
  createdViaEmail: Boolean!
  databaseId: Int
  discussion: Gh_TeamDiscussion!
  editor: Gh_Actor
  id: ID!
  includesCreatedEdit: Boolean!
  lastEditedAt: Gh_DateTime
  number: Int!
  publishedAt: Gh_DateTime
  reactionGroups: [Gh_ReactionGroup!]
  reactions(after: String, before: String, first: Int, last: Int, content: Gh_ReactionContent, orderBy: Gh_ReactionOrder): Gh_ReactionConnection!
  resourcePath: Gh_URI!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  userContentEdits(after: String, before: String, first: Int, last: Int): Gh_UserContentEditConnection
  viewerCanDelete: Boolean!
  viewerCanReact: Boolean!
  viewerCanUpdate: Boolean!
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
  viewerDidAuthor: Boolean!
}

type Gh_TeamDiscussionCommentConnection {
  edges: [Gh_TeamDiscussionCommentEdge]
  nodes: [Gh_TeamDiscussionComment]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TeamDiscussionCommentEdge {
  cursor: String!
  node: Gh_TeamDiscussionComment
}

input Gh_TeamDiscussionCommentOrder {
  field: Gh_TeamDiscussionCommentOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_TeamDiscussionCommentOrderField {
  NUMBER
}

type Gh_TeamDiscussionConnection {
  edges: [Gh_TeamDiscussionEdge]
  nodes: [Gh_TeamDiscussion]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TeamDiscussionEdge {
  cursor: String!
  node: Gh_TeamDiscussion
}

input Gh_TeamDiscussionOrder {
  field: Gh_TeamDiscussionOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_TeamDiscussionOrderField {
  CREATED_AT
}

type Gh_TeamEdge {
  cursor: String!
  node: Gh_Team
}

type Gh_TeamMemberConnection {
  edges: [Gh_TeamMemberEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TeamMemberEdge {
  cursor: String!
  memberAccessResourcePath: Gh_URI!
  memberAccessUrl: Gh_URI!
  node: Gh_User!
  role: Gh_TeamMemberRole!
}

input Gh_TeamMemberOrder {
  field: Gh_TeamMemberOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_TeamMemberOrderField {
  LOGIN
  CREATED_AT
}

enum Gh_TeamMemberRole {
  MAINTAINER
  MEMBER
}

enum Gh_TeamMembershipType {
  IMMEDIATE
  CHILD_TEAM
  ALL
}

input Gh_TeamOrder {
  field: Gh_TeamOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_TeamOrderField {
  NAME
}

enum Gh_TeamPrivacy {
  SECRET
  VISIBLE
}

type Gh_TeamRemoveMemberAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_TeamAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_TeamRemoveRepositoryAuditEntry implements Gh_Node & Gh_AuditEntry & Gh_OrganizationAuditEntryData & Gh_RepositoryAuditEntryData & Gh_TeamAuditEntryData {
  action: String!
  actor: Gh_AuditEntryActor
  actorIp: String
  actorLocation: Gh_ActorLocation
  actorLogin: String
  actorResourcePath: Gh_URI
  actorUrl: Gh_URI
  createdAt: Gh_PreciseDateTime!
  id: ID!
  isLdapMapped: Boolean
  operationType: Gh_OperationType
  organization: Gh_Organization
  organizationName: String
  organizationResourcePath: Gh_URI
  organizationUrl: Gh_URI
  repository: Gh_Repository
  repositoryName: String
  repositoryResourcePath: Gh_URI
  repositoryUrl: Gh_URI
  team: Gh_Team
  teamName: String
  teamResourcePath: Gh_URI
  teamUrl: Gh_URI
  user: Gh_User
  userLogin: String
  userResourcePath: Gh_URI
  userUrl: Gh_URI
}

type Gh_TeamRepositoryConnection {
  edges: [Gh_TeamRepositoryEdge]
  nodes: [Gh_Repository]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TeamRepositoryEdge {
  cursor: String!
  node: Gh_Repository!
  permission: Gh_RepositoryPermission!
}

input Gh_TeamRepositoryOrder {
  field: Gh_TeamRepositoryOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_TeamRepositoryOrderField {
  CREATED_AT
  UPDATED_AT
  PUSHED_AT
  NAME
  PERMISSION
  STARGAZERS
}

enum Gh_TeamRole {
  ADMIN
  MEMBER
}

type Gh_TextMatch {
  fragment: String!
  highlights: [Gh_TextMatchHighlight!]!
  property: String!
}

type Gh_TextMatchHighlight {
  beginIndice: Int!
  endIndice: Int!
  text: String!
}

type Gh_Topic implements Gh_Node & Gh_Starrable {
  id: ID!
  name: String!
  relatedTopics(first: Int = 3): [Gh_Topic!]!
  stargazers(after: String, before: String, first: Int, last: Int, orderBy: Gh_StarOrder): Gh_StargazerConnection!
  viewerHasStarred: Boolean!
}

interface Gh_TopicAuditEntryData {
  topic: Gh_Topic
  topicName: String
}

type Gh_TopicConnection {
  edges: [Gh_TopicEdge]
  nodes: [Gh_Topic]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_TopicEdge {
  cursor: String!
  node: Gh_Topic
}

enum Gh_TopicSuggestionDeclineReason {
  NOT_RELEVANT
  TOO_SPECIFIC
  PERSONAL_PREFERENCE
  TOO_GENERAL
}

input Gh_TransferIssueInput {
  issueId: ID!
  repositoryId: ID!
  clientMutationId: String
}

type Gh_TransferIssuePayload {
  clientMutationId: String
  issue: Gh_Issue
}

type Gh_TransferredEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  fromRepository: Gh_Repository
  id: ID!
  issue: Gh_Issue!
}

type Gh_Tree implements Gh_Node & Gh_GitObject {
  abbreviatedOid: String!
  commitResourcePath: Gh_URI!
  commitUrl: Gh_URI!
  entries: [Gh_TreeEntry!]
  id: ID!
  oid: Gh_GitObjectID!
  repository: Gh_Repository!
}

type Gh_TreeEntry {
  mode: Int!
  name: String!
  object: Gh_GitObject
  oid: Gh_GitObjectID!
  repository: Gh_Repository!
  type: String!
}

input Gh_UnarchiveRepositoryInput {
  repositoryId: ID!
  clientMutationId: String
}

type Gh_UnarchiveRepositoryPayload {
  clientMutationId: String
  repository: Gh_Repository
}

type Gh_UnassignedEvent implements Gh_Node {
  actor: Gh_Actor
  assignable: Gh_Assignable!
  assignee: Gh_Assignee
  createdAt: Gh_DateTime!
  id: ID!
  user: Gh_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

input Gh_UnfollowUserInput {
  userId: ID!
  clientMutationId: String
}

type Gh_UnfollowUserPayload {
  clientMutationId: String
  user: Gh_User
}

interface Gh_UniformResourceLocatable {
  resourcePath: Gh_URI!
  url: Gh_URI!
}

type Gh_UnlabeledEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  label: Gh_Label!
  labelable: Gh_Labelable!
}

input Gh_UnlinkRepositoryFromProjectInput {
  projectId: ID!
  repositoryId: ID!
  clientMutationId: String
}

type Gh_UnlinkRepositoryFromProjectPayload {
  clientMutationId: String
  project: Gh_Project
  repository: Gh_Repository
}

type Gh_UnlockedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  lockable: Gh_Lockable!
}

input Gh_UnlockLockableInput {
  lockableId: ID!
  clientMutationId: String
}

type Gh_UnlockLockablePayload {
  actor: Gh_Actor
  clientMutationId: String
  unlockedRecord: Gh_Lockable
}

type Gh_UnmarkedAsDuplicateEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
}

input Gh_UnmarkIssueAsDuplicateInput {
  duplicateId: ID!
  canonicalId: ID!
  clientMutationId: String
}

type Gh_UnmarkIssueAsDuplicatePayload {
  clientMutationId: String
  duplicate: Gh_IssueOrPullRequest
}

type Gh_UnpinnedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  issue: Gh_Issue!
}

input Gh_UnresolveReviewThreadInput {
  threadId: ID!
  clientMutationId: String
}

type Gh_UnresolveReviewThreadPayload {
  clientMutationId: String
  thread: Gh_PullRequestReviewThread
}

type Gh_UnsubscribedEvent implements Gh_Node {
  actor: Gh_Actor
  createdAt: Gh_DateTime!
  id: ID!
  subscribable: Gh_Subscribable!
}

interface Gh_Updatable {
  viewerCanUpdate: Boolean!
}

interface Gh_UpdatableComment {
  viewerCannotUpdateReasons: [Gh_CommentCannotUpdateReason!]!
}

input Gh_UpdateBranchProtectionRuleInput {
  branchProtectionRuleId: ID!
  pattern: String
  requiresApprovingReviews: Boolean
  requiredApprovingReviewCount: Int
  requiresCommitSignatures: Boolean
  isAdminEnforced: Boolean
  requiresStatusChecks: Boolean
  requiresStrictStatusChecks: Boolean
  requiresCodeOwnerReviews: Boolean
  dismissesStaleReviews: Boolean
  restrictsReviewDismissals: Boolean
  reviewDismissalActorIds: [ID!]
  restrictsPushes: Boolean
  pushActorIds: [ID!]
  requiredStatusCheckContexts: [String!]
  clientMutationId: String
}

type Gh_UpdateBranchProtectionRulePayload {
  branchProtectionRule: Gh_BranchProtectionRule
  clientMutationId: String
}

input Gh_UpdateEnterpriseActionExecutionCapabilitySettingInput {
  enterpriseId: ID!
  capability: Gh_ActionExecutionCapabilitySetting!
  clientMutationId: String
}

type Gh_UpdateEnterpriseActionExecutionCapabilitySettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseAdministratorRoleInput {
  enterpriseId: ID!
  login: String!
  role: Gh_EnterpriseAdministratorRole!
  clientMutationId: String
}

type Gh_UpdateEnterpriseAdministratorRolePayload {
  clientMutationId: String
  message: String
}

input Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseDefaultRepositoryPermissionSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseMembersCanCreateRepositoriesSettingValue
  membersCanCreateRepositoriesPolicyEnabled: Boolean
  membersCanCreatePublicRepositories: Boolean
  membersCanCreatePrivateRepositories: Boolean
  membersCanCreateInternalRepositories: Boolean
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseMembersCanMakePurchasesSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseOrganizationProjectsSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseOrganizationProjectsSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseProfileInput {
  enterpriseId: ID!
  name: String
  description: String
  websiteUrl: String
  location: String
  clientMutationId: String
}

type Gh_UpdateEnterpriseProfilePayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
}

input Gh_UpdateEnterpriseRepositoryProjectsSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseRepositoryProjectsSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseTeamDiscussionsSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledDisabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseTeamDiscussionsSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  enterpriseId: ID!
  settingValue: Gh_EnterpriseEnabledSettingValue!
  clientMutationId: String
}

type Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  clientMutationId: String
  enterprise: Gh_Enterprise
  message: String
}

input Gh_UpdateIssueCommentInput {
  id: ID!
  body: String!
  clientMutationId: String
}

type Gh_UpdateIssueCommentPayload {
  clientMutationId: String
  issueComment: Gh_IssueComment
}

input Gh_UpdateIssueInput {
  id: ID!
  title: String
  body: String
  assigneeIds: [ID!]
  milestoneId: ID
  labelIds: [ID!]
  state: Gh_IssueState
  projectIds: [ID!]
  clientMutationId: String
}

type Gh_UpdateIssuePayload {
  actor: Gh_Actor
  clientMutationId: String
  issue: Gh_Issue
}

input Gh_UpdateProjectCardInput {
  projectCardId: ID!
  isArchived: Boolean
  note: String
  clientMutationId: String
}

type Gh_UpdateProjectCardPayload {
  clientMutationId: String
  projectCard: Gh_ProjectCard
}

input Gh_UpdateProjectColumnInput {
  projectColumnId: ID!
  name: String!
  clientMutationId: String
}

type Gh_UpdateProjectColumnPayload {
  clientMutationId: String
  projectColumn: Gh_ProjectColumn
}

input Gh_UpdateProjectInput {
  projectId: ID!
  name: String
  body: String
  state: Gh_ProjectState
  public: Boolean
  clientMutationId: String
}

type Gh_UpdateProjectPayload {
  clientMutationId: String
  project: Gh_Project
}

input Gh_UpdatePullRequestInput {
  pullRequestId: ID!
  baseRefName: String
  title: String
  body: String
  state: Gh_PullRequestUpdateState
  maintainerCanModify: Boolean
  assigneeIds: [ID!]
  milestoneId: ID
  labelIds: [ID!]
  projectIds: [ID!]
  clientMutationId: String
}

type Gh_UpdatePullRequestPayload {
  actor: Gh_Actor
  clientMutationId: String
  pullRequest: Gh_PullRequest
}

input Gh_UpdatePullRequestReviewCommentInput {
  pullRequestReviewCommentId: ID!
  body: String!
  clientMutationId: String
}

type Gh_UpdatePullRequestReviewCommentPayload {
  clientMutationId: String
  pullRequestReviewComment: Gh_PullRequestReviewComment
}

input Gh_UpdatePullRequestReviewInput {
  pullRequestReviewId: ID!
  body: String!
  clientMutationId: String
}

type Gh_UpdatePullRequestReviewPayload {
  clientMutationId: String
  pullRequestReview: Gh_PullRequestReview
}

input Gh_UpdateRefInput {
  refId: ID!
  oid: Gh_GitObjectID!
  force: Boolean = false
  clientMutationId: String
}

type Gh_UpdateRefPayload {
  clientMutationId: String
  ref: Gh_Ref
}

input Gh_UpdateRepositoryInput {
  repositoryId: ID!
  name: String
  description: String
  template: Boolean
  homepageUrl: Gh_URI
  hasWikiEnabled: Boolean
  hasIssuesEnabled: Boolean
  hasProjectsEnabled: Boolean
  clientMutationId: String
}

type Gh_UpdateRepositoryPayload {
  clientMutationId: String
  repository: Gh_Repository
}

input Gh_UpdateSubscriptionInput {
  subscribableId: ID!
  state: Gh_SubscriptionState!
  clientMutationId: String
}

type Gh_UpdateSubscriptionPayload {
  clientMutationId: String
  subscribable: Gh_Subscribable
}

input Gh_UpdateTeamDiscussionCommentInput {
  id: ID!
  body: String!
  bodyVersion: String
  clientMutationId: String
}

type Gh_UpdateTeamDiscussionCommentPayload {
  clientMutationId: String
  teamDiscussionComment: Gh_TeamDiscussionComment
}

input Gh_UpdateTeamDiscussionInput {
  id: ID!
  title: String
  body: String
  bodyVersion: String
  pinned: Boolean
  clientMutationId: String
}

type Gh_UpdateTeamDiscussionPayload {
  clientMutationId: String
  teamDiscussion: Gh_TeamDiscussion
}

input Gh_UpdateTopicsInput {
  repositoryId: ID!
  topicNames: [String!]!
  clientMutationId: String
}

type Gh_UpdateTopicsPayload {
  clientMutationId: String
  invalidTopicNames: [String!]
  repository: Gh_Repository
}

scalar Gh_URI

type Gh_User implements Gh_Node & Gh_Actor & Gh_RegistryPackageOwner & Gh_RegistryPackageSearch & Gh_ProjectOwner & Gh_RepositoryOwner & Gh_UniformResourceLocatable & Gh_ProfileOwner & Gh_Sponsorable {
  anyPinnableItems(type: Gh_PinnableItemType): Boolean!
  avatarUrl(size: Int): Gh_URI!
  bio: String
  bioHTML: Gh_HTML!
  commitComments(after: String, before: String, first: Int, last: Int): Gh_CommitCommentConnection!
  company: String
  companyHTML: Gh_HTML!
  contributionsCollection(organizationID: ID, from: Gh_DateTime, to: Gh_DateTime): Gh_ContributionsCollection!
  createdAt: Gh_DateTime!
  databaseId: Int
  email: String!
  followers(after: String, before: String, first: Int, last: Int): Gh_FollowerConnection!
  following(after: String, before: String, first: Int, last: Int): Gh_FollowingConnection!
  gist(name: String!): Gh_Gist
  gistComments(after: String, before: String, first: Int, last: Int): Gh_GistCommentConnection!
  gists(privacy: Gh_GistPrivacy, orderBy: Gh_GistOrder, after: String, before: String, first: Int, last: Int): Gh_GistConnection!
  hovercard(primarySubjectId: ID): Gh_Hovercard!
  id: ID!
  isBountyHunter: Boolean!
  isCampusExpert: Boolean!
  isDeveloperProgramMember: Boolean!
  isEmployee: Boolean!
  isHireable: Boolean!
  isSiteAdmin: Boolean!
  isViewer: Boolean!
  issueComments(after: String, before: String, first: Int, last: Int): Gh_IssueCommentConnection!
  issues(orderBy: Gh_IssueOrder, labels: [String!], states: [Gh_IssueState!], filterBy: Gh_IssueFilters, after: String, before: String, first: Int, last: Int): Gh_IssueConnection!
  itemShowcase: Gh_ProfileItemShowcase!
  location: String
  login: String!
  name: String
  organization(login: String!): Gh_Organization
  organizations(after: String, before: String, first: Int, last: Int): Gh_OrganizationConnection!
  pinnableItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItems(types: [Gh_PinnableItemType!], after: String, before: String, first: Int, last: Int): Gh_PinnableItemConnection!
  pinnedItemsRemaining: Int!
  pinnedRepositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection! @deprecated(reason: "pinnedRepositories will be removed Use ProfileOwner.pinnedItems instead. Removal on 2019-10-01 UTC.")
  project(number: Int!): Gh_Project
  projects(orderBy: Gh_ProjectOrder, search: String, states: [Gh_ProjectState!], after: String, before: String, first: Int, last: Int): Gh_ProjectConnection!
  projectsResourcePath: Gh_URI!
  projectsUrl: Gh_URI!
  publicKeys(after: String, before: String, first: Int, last: Int): Gh_PublicKeyConnection!
  pullRequests(states: [Gh_PullRequestState!], labels: [String!], headRefName: String, baseRefName: String, orderBy: Gh_IssueOrder, after: String, before: String, first: Int, last: Int): Gh_PullRequestConnection!
  registryPackages(after: String, before: String, first: Int, last: Int, name: String, names: [String], repositoryId: ID, packageType: Gh_RegistryPackageType, registryPackageType: String, publicOnly: Boolean = false): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageOwner` object instead. Removal on 2020-04-01 UTC.")
  registryPackagesForQuery(after: String, before: String, first: Int, last: Int, query: String, packageType: Gh_RegistryPackageType): Gh_RegistryPackageConnection! @deprecated(reason: "Renaming GitHub Packages fields and objects. Use the `PackageSearch` object instead. Removal on 2020-04-01 UTC.")
  repositories(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int, isFork: Boolean): Gh_RepositoryConnection!
  repositoriesContributedTo(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, isLocked: Boolean, includeUserRepositories: Boolean, contributionTypes: [Gh_RepositoryContributionType], after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection!
  repository(name: String!): Gh_Repository
  resourcePath: Gh_URI!
  savedReplies(after: String, before: String, first: Int, last: Int, orderBy: Gh_SavedReplyOrder = {field: UPDATED_AT, direction: DESC}): Gh_SavedReplyConnection
  sponsorsListing: Gh_SponsorsListing
  sponsorshipsAsMaintainer(after: String, before: String, first: Int, last: Int, includePrivate: Boolean = false, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
  sponsorshipsAsSponsor(after: String, before: String, first: Int, last: Int, orderBy: Gh_SponsorshipOrder): Gh_SponsorshipConnection!
  starredRepositories(ownedByViewer: Boolean, orderBy: Gh_StarOrder, after: String, before: String, first: Int, last: Int): Gh_StarredRepositoryConnection!
  status: Gh_UserStatus
  topRepositories(after: String, before: String, first: Int, last: Int, orderBy: Gh_RepositoryOrder!, since: Gh_DateTime): Gh_RepositoryConnection!
  updatedAt: Gh_DateTime!
  url: Gh_URI!
  viewerCanChangePinnedItems: Boolean!
  viewerCanCreateProjects: Boolean!
  viewerCanFollow: Boolean!
  viewerIsFollowing: Boolean!
  watching(privacy: Gh_RepositoryPrivacy, orderBy: Gh_RepositoryOrder, affiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], ownerAffiliations: [Gh_RepositoryAffiliation] = [OWNER, COLLABORATOR], isLocked: Boolean, after: String, before: String, first: Int, last: Int): Gh_RepositoryConnection!
  websiteUrl: Gh_URI
}

enum Gh_UserBlockDuration {
  ONE_DAY
  THREE_DAYS
  ONE_WEEK
  ONE_MONTH
  PERMANENT
}

type Gh_UserBlockedEvent implements Gh_Node {
  actor: Gh_Actor
  blockDuration: Gh_UserBlockDuration!
  createdAt: Gh_DateTime!
  id: ID!
  subject: Gh_User
}

type Gh_UserConnection {
  edges: [Gh_UserEdge]
  nodes: [Gh_User]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_UserContentEdit implements Gh_Node {
  createdAt: Gh_DateTime!
  deletedAt: Gh_DateTime
  deletedBy: Gh_Actor
  diff: String
  editedAt: Gh_DateTime!
  editor: Gh_Actor
  id: ID!
  updatedAt: Gh_DateTime!
}

type Gh_UserContentEditConnection {
  edges: [Gh_UserContentEditEdge]
  nodes: [Gh_UserContentEdit]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_UserContentEditEdge {
  cursor: String!
  node: Gh_UserContentEdit
}

type Gh_UserEdge {
  cursor: String!
  node: Gh_User
}

type Gh_UserStatus implements Gh_Node {
  createdAt: Gh_DateTime!
  emoji: String
  emojiHTML: Gh_HTML
  expiresAt: Gh_DateTime
  id: ID!
  indicatesLimitedAvailability: Boolean!
  message: String
  organization: Gh_Organization
  updatedAt: Gh_DateTime!
  user: Gh_User!
}

type Gh_UserStatusConnection {
  edges: [Gh_UserStatusEdge]
  nodes: [Gh_UserStatus]
  pageInfo: Gh_PageInfo!
  totalCount: Int!
}

type Gh_UserStatusEdge {
  cursor: String!
  node: Gh_UserStatus
}

input Gh_UserStatusOrder {
  field: Gh_UserStatusOrderField!
  direction: Gh_OrderDirection!
}

enum Gh_UserStatusOrderField {
  UPDATED_AT
}

scalar Gh_X509Certificate

type Mutation {
  acceptEnterpriseAdministratorInvitation(input: Gh_AcceptEnterpriseAdministratorInvitationInput!): Gh_AcceptEnterpriseAdministratorInvitationPayload
  acceptTopicSuggestion(input: Gh_AcceptTopicSuggestionInput!): Gh_AcceptTopicSuggestionPayload
  addAssigneesToAssignable(input: Gh_AddAssigneesToAssignableInput!): Gh_AddAssigneesToAssignablePayload
  addComment(input: Gh_AddCommentInput!): Gh_AddCommentPayload
  addLabelsToLabelable(input: Gh_AddLabelsToLabelableInput!): Gh_AddLabelsToLabelablePayload
  addProjectCard(input: Gh_AddProjectCardInput!): Gh_AddProjectCardPayload
  addProjectColumn(input: Gh_AddProjectColumnInput!): Gh_AddProjectColumnPayload
  addPullRequestReview(input: Gh_AddPullRequestReviewInput!): Gh_AddPullRequestReviewPayload
  addPullRequestReviewComment(input: Gh_AddPullRequestReviewCommentInput!): Gh_AddPullRequestReviewCommentPayload
  addReaction(input: Gh_AddReactionInput!): Gh_AddReactionPayload
  addStar(input: Gh_AddStarInput!): Gh_AddStarPayload
  archiveRepository(input: Gh_ArchiveRepositoryInput!): Gh_ArchiveRepositoryPayload
  cancelEnterpriseAdminInvitation(input: Gh_CancelEnterpriseAdminInvitationInput!): Gh_CancelEnterpriseAdminInvitationPayload
  changeUserStatus(input: Gh_ChangeUserStatusInput!): Gh_ChangeUserStatusPayload
  clearLabelsFromLabelable(input: Gh_ClearLabelsFromLabelableInput!): Gh_ClearLabelsFromLabelablePayload
  cloneProject(input: Gh_CloneProjectInput!): Gh_CloneProjectPayload
  cloneTemplateRepository(input: Gh_CloneTemplateRepositoryInput!): Gh_CloneTemplateRepositoryPayload
  closeIssue(input: Gh_CloseIssueInput!): Gh_CloseIssuePayload
  closePullRequest(input: Gh_ClosePullRequestInput!): Gh_ClosePullRequestPayload
  convertProjectCardNoteToIssue(input: Gh_ConvertProjectCardNoteToIssueInput!): Gh_ConvertProjectCardNoteToIssuePayload
  createBranchProtectionRule(input: Gh_CreateBranchProtectionRuleInput!): Gh_CreateBranchProtectionRulePayload
  createEnterpriseOrganization(input: Gh_CreateEnterpriseOrganizationInput!): Gh_CreateEnterpriseOrganizationPayload
  createIssue(input: Gh_CreateIssueInput!): Gh_CreateIssuePayload
  createProject(input: Gh_CreateProjectInput!): Gh_CreateProjectPayload
  createPullRequest(input: Gh_CreatePullRequestInput!): Gh_CreatePullRequestPayload
  createRef(input: Gh_CreateRefInput!): Gh_CreateRefPayload
  createRepository(input: Gh_CreateRepositoryInput!): Gh_CreateRepositoryPayload
  createTeamDiscussion(input: Gh_CreateTeamDiscussionInput!): Gh_CreateTeamDiscussionPayload
  createTeamDiscussionComment(input: Gh_CreateTeamDiscussionCommentInput!): Gh_CreateTeamDiscussionCommentPayload
  declineTopicSuggestion(input: Gh_DeclineTopicSuggestionInput!): Gh_DeclineTopicSuggestionPayload
  deleteBranchProtectionRule(input: Gh_DeleteBranchProtectionRuleInput!): Gh_DeleteBranchProtectionRulePayload
  deleteDeployment(input: Gh_DeleteDeploymentInput!): Gh_DeleteDeploymentPayload
  deleteIssue(input: Gh_DeleteIssueInput!): Gh_DeleteIssuePayload
  deleteIssueComment(input: Gh_DeleteIssueCommentInput!): Gh_DeleteIssueCommentPayload
  deleteProject(input: Gh_DeleteProjectInput!): Gh_DeleteProjectPayload
  deleteProjectCard(input: Gh_DeleteProjectCardInput!): Gh_DeleteProjectCardPayload
  deleteProjectColumn(input: Gh_DeleteProjectColumnInput!): Gh_DeleteProjectColumnPayload
  deletePullRequestReview(input: Gh_DeletePullRequestReviewInput!): Gh_DeletePullRequestReviewPayload
  deletePullRequestReviewComment(input: Gh_DeletePullRequestReviewCommentInput!): Gh_DeletePullRequestReviewCommentPayload
  deleteRef(input: Gh_DeleteRefInput!): Gh_DeleteRefPayload
  deleteTeamDiscussion(input: Gh_DeleteTeamDiscussionInput!): Gh_DeleteTeamDiscussionPayload
  deleteTeamDiscussionComment(input: Gh_DeleteTeamDiscussionCommentInput!): Gh_DeleteTeamDiscussionCommentPayload
  dismissPullRequestReview(input: Gh_DismissPullRequestReviewInput!): Gh_DismissPullRequestReviewPayload
  followUser(input: Gh_FollowUserInput!): Gh_FollowUserPayload
  inviteEnterpriseAdmin(input: Gh_InviteEnterpriseAdminInput!): Gh_InviteEnterpriseAdminPayload
  linkRepositoryToProject(input: Gh_LinkRepositoryToProjectInput!): Gh_LinkRepositoryToProjectPayload
  lockLockable(input: Gh_LockLockableInput!): Gh_LockLockablePayload
  mergeBranch(input: Gh_MergeBranchInput!): Gh_MergeBranchPayload
  mergePullRequest(input: Gh_MergePullRequestInput!): Gh_MergePullRequestPayload
  moveProjectCard(input: Gh_MoveProjectCardInput!): Gh_MoveProjectCardPayload
  moveProjectColumn(input: Gh_MoveProjectColumnInput!): Gh_MoveProjectColumnPayload
  regenerateEnterpriseIdentityProviderRecoveryCodes(input: Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesInput!): Gh_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
  removeAssigneesFromAssignable(input: Gh_RemoveAssigneesFromAssignableInput!): Gh_RemoveAssigneesFromAssignablePayload
  removeEnterpriseAdmin(input: Gh_RemoveEnterpriseAdminInput!): Gh_RemoveEnterpriseAdminPayload
  removeEnterpriseOrganization(input: Gh_RemoveEnterpriseOrganizationInput!): Gh_RemoveEnterpriseOrganizationPayload
  removeLabelsFromLabelable(input: Gh_RemoveLabelsFromLabelableInput!): Gh_RemoveLabelsFromLabelablePayload
  removeOutsideCollaborator(input: Gh_RemoveOutsideCollaboratorInput!): Gh_RemoveOutsideCollaboratorPayload
  removeReaction(input: Gh_RemoveReactionInput!): Gh_RemoveReactionPayload
  removeStar(input: Gh_RemoveStarInput!): Gh_RemoveStarPayload
  reopenIssue(input: Gh_ReopenIssueInput!): Gh_ReopenIssuePayload
  reopenPullRequest(input: Gh_ReopenPullRequestInput!): Gh_ReopenPullRequestPayload
  requestReviews(input: Gh_RequestReviewsInput!): Gh_RequestReviewsPayload
  resolveReviewThread(input: Gh_ResolveReviewThreadInput!): Gh_ResolveReviewThreadPayload
  submitPullRequestReview(input: Gh_SubmitPullRequestReviewInput!): Gh_SubmitPullRequestReviewPayload
  transferIssue(input: Gh_TransferIssueInput!): Gh_TransferIssuePayload
  unarchiveRepository(input: Gh_UnarchiveRepositoryInput!): Gh_UnarchiveRepositoryPayload
  unfollowUser(input: Gh_UnfollowUserInput!): Gh_UnfollowUserPayload
  unlinkRepositoryFromProject(input: Gh_UnlinkRepositoryFromProjectInput!): Gh_UnlinkRepositoryFromProjectPayload
  unlockLockable(input: Gh_UnlockLockableInput!): Gh_UnlockLockablePayload
  unmarkIssueAsDuplicate(input: Gh_UnmarkIssueAsDuplicateInput!): Gh_UnmarkIssueAsDuplicatePayload
  unresolveReviewThread(input: Gh_UnresolveReviewThreadInput!): Gh_UnresolveReviewThreadPayload
  updateBranchProtectionRule(input: Gh_UpdateBranchProtectionRuleInput!): Gh_UpdateBranchProtectionRulePayload
  updateEnterpriseActionExecutionCapabilitySetting(input: Gh_UpdateEnterpriseActionExecutionCapabilitySettingInput!): Gh_UpdateEnterpriseActionExecutionCapabilitySettingPayload
  updateEnterpriseAdministratorRole(input: Gh_UpdateEnterpriseAdministratorRoleInput!): Gh_UpdateEnterpriseAdministratorRolePayload
  updateEnterpriseAllowPrivateRepositoryForkingSetting(input: Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!): Gh_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
  updateEnterpriseDefaultRepositoryPermissionSetting(input: Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingInput!): Gh_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting(input: Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!): Gh_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
  updateEnterpriseMembersCanCreateRepositoriesSetting(input: Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!): Gh_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
  updateEnterpriseMembersCanDeleteIssuesSetting(input: Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingInput!): Gh_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
  updateEnterpriseMembersCanDeleteRepositoriesSetting(input: Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!): Gh_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
  updateEnterpriseMembersCanInviteCollaboratorsSetting(input: Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!): Gh_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
  updateEnterpriseMembersCanMakePurchasesSetting(input: Gh_UpdateEnterpriseMembersCanMakePurchasesSettingInput!): Gh_UpdateEnterpriseMembersCanMakePurchasesSettingPayload
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting(input: Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!): Gh_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
  updateEnterpriseMembersCanViewDependencyInsightsSetting(input: Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!): Gh_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
  updateEnterpriseOrganizationProjectsSetting(input: Gh_UpdateEnterpriseOrganizationProjectsSettingInput!): Gh_UpdateEnterpriseOrganizationProjectsSettingPayload
  updateEnterpriseProfile(input: Gh_UpdateEnterpriseProfileInput!): Gh_UpdateEnterpriseProfilePayload
  updateEnterpriseRepositoryProjectsSetting(input: Gh_UpdateEnterpriseRepositoryProjectsSettingInput!): Gh_UpdateEnterpriseRepositoryProjectsSettingPayload
  updateEnterpriseTeamDiscussionsSetting(input: Gh_UpdateEnterpriseTeamDiscussionsSettingInput!): Gh_UpdateEnterpriseTeamDiscussionsSettingPayload
  updateEnterpriseTwoFactorAuthenticationRequiredSetting(input: Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!): Gh_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
  updateIssue(input: Gh_UpdateIssueInput!): Gh_UpdateIssuePayload
  updateIssueComment(input: Gh_UpdateIssueCommentInput!): Gh_UpdateIssueCommentPayload
  updateProject(input: Gh_UpdateProjectInput!): Gh_UpdateProjectPayload
  updateProjectCard(input: Gh_UpdateProjectCardInput!): Gh_UpdateProjectCardPayload
  updateProjectColumn(input: Gh_UpdateProjectColumnInput!): Gh_UpdateProjectColumnPayload
  updatePullRequest(input: Gh_UpdatePullRequestInput!): Gh_UpdatePullRequestPayload
  updatePullRequestReview(input: Gh_UpdatePullRequestReviewInput!): Gh_UpdatePullRequestReviewPayload
  updatePullRequestReviewComment(input: Gh_UpdatePullRequestReviewCommentInput!): Gh_UpdatePullRequestReviewCommentPayload
  updateRef(input: Gh_UpdateRefInput!): Gh_UpdateRefPayload
  updateRepository(input: Gh_UpdateRepositoryInput!): Gh_UpdateRepositoryPayload
  updateSubscription(input: Gh_UpdateSubscriptionInput!): Gh_UpdateSubscriptionPayload
  updateTeamDiscussion(input: Gh_UpdateTeamDiscussionInput!): Gh_UpdateTeamDiscussionPayload
  updateTeamDiscussionComment(input: Gh_UpdateTeamDiscussionCommentInput!): Gh_UpdateTeamDiscussionCommentPayload
  updateTopics(input: Gh_UpdateTopicsInput!): Gh_UpdateTopicsPayload
}

type Query {
  codeOfConduct(key: String!): Gh_CodeOfConduct
  codesOfConduct: [Gh_CodeOfConduct]
  enterprise(slug: String!, invitationToken: String): Gh_Enterprise
  enterpriseAdministratorInvitation(userLogin: String!, enterpriseSlug: String!, role: Gh_EnterpriseAdministratorRole!): Gh_EnterpriseAdministratorInvitation
  enterpriseAdministratorInvitationByToken(invitationToken: String!): Gh_EnterpriseAdministratorInvitation
  license(key: String!): Gh_License
  licenses: [Gh_License]!
  marketplaceCategories(includeCategories: [String!], excludeEmpty: Boolean, excludeSubcategories: Boolean): [Gh_MarketplaceCategory!]!
  marketplaceCategory(slug: String!, useTopicAliases: Boolean): Gh_MarketplaceCategory
  marketplaceListing(slug: String!): Gh_MarketplaceListing
  marketplaceListings(after: String, before: String, first: Int, last: Int, categorySlug: String, useTopicAliases: Boolean, viewerCanAdmin: Boolean, adminId: ID, organizationId: ID, allStates: Boolean, slugs: [String], primaryCategoryOnly: Boolean = false, withFreeTrialsOnly: Boolean = false): Gh_MarketplaceListingConnection!
  meta: Gh_GitHubMetadata!
  node(id: ID!): Gh_Node
  nodes(ids: [ID!]!): [Gh_Node]!
  organization(login: String!): Gh_Organization
  rateLimit(dryRun: Boolean = false): Gh_RateLimit
  relay: Query!
  repository(owner: String!, name: String!): Gh_Repository
  repositoryOwner(login: String!): Gh_RepositoryOwner
  resource(url: Gh_URI!): Gh_UniformResourceLocatable
  search(after: String, before: String, first: Int, last: Int, query: String!, type: Gh_SearchType!): Gh_SearchResultItemConnection!
  securityAdvisories(orderBy: Gh_SecurityAdvisoryOrder = {field: UPDATED_AT, direction: DESC}, identifier: Gh_SecurityAdvisoryIdentifierFilter, publishedSince: Gh_DateTime, updatedSince: Gh_DateTime, after: String, before: String, first: Int, last: Int): Gh_SecurityAdvisoryConnection!
  securityAdvisory(ghsaId: String!): Gh_SecurityAdvisory
  securityVulnerabilities(orderBy: Gh_SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}, ecosystem: Gh_SecurityAdvisoryEcosystem, package: String, severities: [Gh_SecurityAdvisorySeverity!], after: String, before: String, first: Int, last: Int): Gh_SecurityVulnerabilityConnection!
  sponsorsListing(slug: String!): Gh_SponsorsListing @deprecated(reason: "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.")
  topic(name: String!): Gh_Topic
  user(login: String!): Gh_User
  viewer: Gh_User!
}
